From Wikipedia, the free encyclopedia Jump to: navigation, search A software engineer writing Java code Software engineering is the study and application of engineering to the design, development, and maintenance of software.[1][2][3] Contents 1 History 2 Subdisciplines 3 Education 4 Profession 4.1 Employment 4.2 Certification 4.3 Impact of globalization 5 Related fields 6 Controversy 6.1 Over definition 6.2 Criticism 7 See also 8 Notes 9 References 10 Further reading 11 External links History[edit] Main article: History of software engineering When the first digital computers appeared in the early 1940s,[4] the instructions to make them operate were wired into the machine. Practitioners quickly realized that this design was not flexible and came up with the "stored program architecture" or von Neumann architecture. Thus the division between "hardware" and "software" began with abstraction being used to deal with the complexity of computing. Programming languages started to appear in the 1950s and this was also another major step in abstraction. Major languages such as Fortran, ALGOL, and COBOL were released in the late 1950s to deal with scientific, algorithmic, and business problems respectively. E.W. Dijkstra wrote his seminal paper, "Go To Statement Considered Harmful",[5] in 1968 and David Parnas introduced the key concept of modularity and information hiding in 1972[6] to help programmers deal with the ever increasing complexity of software systems. The term "software engineering" was first used in 1968 as a title for the world's first conference on software engineering, sponsored and facilitated by NATO. The conference was attended by international experts on software who agreed on defining best practices for software grounded in the application of engineering. The result of the conference is a report that defines how software should be developed [i.e., software engineering foundations]. The original report is publicly available.[7] The discipline of software engineering was created to address poor quality of software, get projects exceeding time and budget under control, and ensure that software is built systematically, rigorously, measurably, on time, on budget, and within specification. Engineering already addresses all these issues, hence the same principles used in engineering can be applied to software. The widespread lack of best practices for software at the time was perceived as a "software crisis".[8][9][10] Barry W. Boehm documented several key advances to the field in his 1981 book, 'Software Engineering Economics'.[11] These include his Constructive Cost Model (COCOMO), which relates software development effort for a program, in man-years T, to source lines of code (SLOC). The book analyzes sixty-three software projects and concludes the cost of fixing errors escalates as we move the project toward field use. The book also asserts that the key driver of software cost is the capability of the software development team. In 1984, the Software Engineering Institute (SEI) was established as a federally funded research and development center headquartered on the campus of Carnegie Mellon University in Pittsburgh, Pennsylvania, United States. Watts Humphrey founded the SEI Software Process Program, aimed at understanding and managing the software engineering process. His 1989 book, Managing the Software Process,[12] asserts that the Software Development Process can and should be controlled, measured, and improved. The Process Maturity Levels introduced would become the Capability Maturity Model Integration for Development(CMMi-DEV), which has defined how the US Government evaluates the abilities of a software development team. Modern, generally accepted best-practices for software engineering have been collected by the ISO/IEC JTC 1/SC 7 subcommittee and published as the Software Engineering Body of Knowledge (SWEBOK).[13] Subdisciplines[edit] Software engineering can be divided into ten subdisciplines. They are:[1] Requirements engineering: The elicitation, analysis, specification, and validation of requirements for software. Software design: The process of defining the architecture, components, interfaces, and other characteristics of a system or component. It is also defined as the result of that process. Software construction: The detailed creation of working, meaningful software through a combination of coding, verification, unit testing, integration testing, and debugging. Software testing: An empirical, technical investigation conducted to provide stakeholders with information about the quality of the product or service under test. Software maintenance: The totality of activities required to provide cost-effective support to software. Software configuration management: The identification of the configuration of a system at distinct points in time for the purpose of systematically controlling changes to the configuration, and maintaining the integrity and traceability of the configuration throughout the system life cycle. Software engineering management: The application of management activities—planning, coordinating, measuring, monitoring, controlling, and reporting—to ensure that the development and maintenance of software is systematic, disciplined, and quantified. Software engineering process: The definition, implementation, assessment, measurement, management, change, and improvement of the software life cycle process itself. Software engineering tools and methods: The computer-based tools that are intended to assist the software life cycle processes (see Computer-aided software engineering) and the methods which impose structure on the software engineering activity with the goal of making the activity systematic and ultimately more likely to be successful. Software quality management: The degree to which a set of inherent characteristics fulfills requirements. Education[edit] Knowledge of computer programming is a prerequisite to becoming a software engineer. In 2004 the IEEE Computer Society produced the SWEBOK, which has been published as ISO/IEC Technical Report 1979:2004, describing the body of knowledge that they recommend to be mastered by a graduate software engineer with four years of experience.[14] Many software engineers enter the profession by obtaining a university degree or training at a vocational school. One standard international curriculum for undergraduate software engineering degrees was defined by the CCSE, and updated in 2004.[15] A number of universities have Software Engineering degree programs; as of 2010[update], there were 244 Campus programs, 70 Online programs, 230 Masters-level programs, 41 Doctorate-level programs, and 69 Certificate-level programs in the United States.[16] For practitioners who wish to become proficient and recognized as professional software engineers, the IEEE offers two certifications that extend knowledge above level achieved by an academic degree: Certified Software Development Associate and Certified Software Development Professional. In addition to university education, many companies sponsor internships for students wishing to pursue careers in information technology. These internships can introduce the student to interesting real-world tasks that typical software engineers encounter every day. Similar experience can be gained through military service in software engineering. Profession[edit] Main article: Software engineer Legal requirements for the licensing or certification of professional software engineers vary around the world. In the UK, the British Computer Society licenses software engineers and members of the society can also become Chartered Engineers (CEng), while in some areas of Canada, such as Alberta, Ontario,[17] and Quebec, software engineers can hold the Professional Engineer (P.Eng) designation and/or the Information Systems Professional (I.S.P.) designation. In Canada, there is a legal requirement to have P.Eng when one wants to use the title "engineer" or practice "software engineering". The United States, starting from 2013 offers an NCEES Professional Engineer exam for Software Engineering, thereby allowing Software Engineers to be licensed and recognized.[18] Mandatory licensing is currently still largely debated, and perceived as controversial. In some parts of the US such as Texas, the use of the term Engineer is regulated by law and reserved only for use by individuals who have a Professional Engineer license. The IEEE informs the professional engineer license is not required unless the individual would work for public where health of others could be at risk if the engineer was not fully qualified to required standards by the particular state. Professional engineer licenses are specific to the state which has awarded them, and have to be regularly retaken. The IEEE Computer Society and the ACM, the two main US-based professional organizations of software engineering, publish guides to the profession of software engineering. The IEEE's Guide to the Software Engineering Body of Knowledge - 2004 Version, or SWEBOK, defines the field and describes the knowledge the IEEE expects a practicing software engineer to have. Currently, the SWEBOK v3 is being produced and will likely be released in mid-2013.[19] The IEEE also promulgates a "Software Engineering Code of Ethics".[20] Employment[edit] In 2004, the U. S. Bureau of Labor Statistics counted 760,840 software engineers holding jobs in the U.S.; in the same time period there were some 1.4 million practitioners employed in the U.S. in all other engineering disciplines combined.[21] Due to its relative newness as a field of study, formal education in software engineering is often taught as part of a computer science curriculum, and many software engineers hold computer science degrees and have no engineering background whatsoever.[22] Many software engineers work as employees or contractors. Software engineers work with businesses, government agencies (civilian or military), and non-profit organizations. Some software engineers work for themselves as freelancers. Some organizations have specialists to perform each of the tasks in the software development process. Other organizations require software engineers to do many or all of them. In large projects, people may specialize in only one role. In small projects, people may fill several or all roles at the same time. Specializations include: in industry (analysts, architects, developers, testers, technical support, middleware analysts, managers) and in academia (educators, researchers). Most software engineers and programmers work 40 hours a week, but about 15 percent of software engineers and 11 percent of programmers worked more than 50 hours a week in 2008. Injuries in these occupations are rare. However, like other workers who spend long periods in front of a computer terminal typing at a keyboard, engineers and programmers are susceptible to eyestrain, back discomfort, and hand and wrist problems such as carpal tunnel syndrome.[23] The field's future looks bright according to Money Magazine and Salary.com, which rated Software Engineer as the best job in the United States in 2006.[24] In 2012, software engineering was again ranked as the best job in the United States, this time by CareerCast.com.[25] Certification[edit] The Software Engineering Institute offers certifications on specific topics like security, Process improvement and software architecture.[26] Apple, IBM, Microsoft and other companies also sponsor their own certification examinations. Many IT certification programs are oriented toward specific technologies, and managed by the vendors of these technologies.[27] These certification programs are tailored to the institutions that would employ people who use these technologies. Broader certification of general software engineering skills is available through various professional societies. As of 2006[update], the IEEE had certified over 575 software professionals as a Certified Software Development Professional (CSDP).[28] In 2008 they added an entry-level certification known as the Certified Software Development Associate (CSDA).[29] The ACM had a professional certification program in the early 1980s,[citation needed] which was discontinued due to lack of interest. The ACM examined the possibility of professional certification of software engineers in the late 1990s, but eventually decided that such certification was inappropriate for the professional industrial practice of software engineering.[30] In the U.K. the British Computer Society has developed a legally recognized professional certification called Chartered IT Professional (CITP), available to fully qualified members (MBCS). Software engineers may be eligible for membership of the Institution of Engineering and Technology and so qualify for Chartered Engineer status. In Canada the Canadian Information Processing Society has developed a legally recognized professional certification called Information Systems Professional (ISP).[31] In Ontario, Canada, Software Engineers who graduate from a Canadian Engineering Accreditation Board (CEAB) accredited program, successfully complete PEO's (Professional Engineers Ontario) Professional Practice Examination (PPE) and have at least 48 months of acceptable engineering experience are eligible to be licensed through the Professional Engineers Ontario and can become Professional Engineers P.Eng.[32] The PEO does not recognize any online or distance education however; and does not consider Computer Science programs to be equivalent to software engineering programs despite the tremendous overlap between the two. This has sparked controversy and a certification war. It has also held the number of P.Eng holders for the profession exceptionally low. The vast majority of working professionals in the field hold a degree in CS, not SE. Given the difficult certification path for holders of non-SE degrees, most never bother to pursue the license. Impact of globalization[edit] The initial impact of outsourcing, and the relatively lower cost of international human resources in developing third world countries led to a massive migration of software development activities from corporations in North America and Europe to India and later: China, Russia, and other developing countries. This approach had some flaws, mainly the distance / timezone difference that prevented human interaction between clients and developers and the massive job transfer. This had a negative impact on many aspects of the software engineering profession. For example, some students in the developed world avoid education related to software engineering because of the fear of offshore outsourcing (importing software products or services from other countries) and of being displaced by foreign visa workers.[33] Although statistics do not currently show a threat to software engineering itself; a related career, computer programming does appear to have been affected.[34][35] Nevertheless, the ability to smartly leverage offshore and near-shore resources via the follow-the-sun workflow has improved the overall operational capability of many organizations.[36] When North Americans are leaving work, Asians are just arriving to work. When Asians are leaving work, Europeans are arriving to work. This provides a continuous ability to have human oversight on business-critical processes 24 hours per day, without paying overtime compensation or disrupting a key human resource, sleep patterns. While global outsourcing has several advantages, global - and generally distributed - development can run into serious difficulties resulting from the distance between developers. This is due to the key elements of this type of distance which have been identified as geographical, temporal, cultural and communication (which includes the use of different languages and dialects of English in different locations).[37] Research has been carried out in the area of global software development over the last 15 years and an extensive body of relevant work published which highlights the benefits and problems associated with the complex activity. As with other aspects of software engineering research is ongoing in this and related areas. Related fields[edit] Software engineering is a direct sub-field of computer science and has some relations with management science[citation needed]. It is also considered a part of overall systems engineering and a direct sub-field of engineering[citation needed]. Controversy[edit] Over definition[edit] Typical formal definitions of software engineering are: "the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software".[38] "an engineering discipline that is concerned with all aspects of software production"[39] "the establishment and use of sound engineering principles in order to economically obtain software that is reliable and works efficiently on real machines"[40] The term has been used less formally: as the informal contemporary term for the broad range of activities that were formerly called computer programming and systems analysis;[41] as the broad term for all aspects of the practice of computer programming, as opposed to the theory of computer programming, which is called computer science;[42] as the term embodying the advocacy of a specific approach to computer programming, one that urges that it be treated as an engineering discipline rather than an art or a craft, and advocates the codification of recommended practices.[43] Criticism[edit] Software Engineering sees its practitioners as individuals who follow well-defined engineering approaches to problem-solving. These approaches are specified in various software engineering books and research papers, always with the connotations of predictability, precision, mitigated risk and professionalism. This perspective has led to calls for licensing, certification and codified bodies of knowledge as mechanisms for spreading the engineering knowledge and maturing the field. Software Craftsmanship has been proposed by a body of software developers as an alternative that emphasizes the coding skills and accountability of the software developers themselves without professionalism or any prescribed curriculum leading to ad-hoc problem-solving (craftmanship) without engineering (lack of predictability, precision, missing risk mitigation, methods are informal and poorly defined). The Software Craftsmanship Manifesto extends the Agile Software Manifesto[44] and draws a metaphor between modern software development and the apprenticeship model of medieval Europe. Software engineering extends engineering and draws on the engineering model, i.e. engineering process, engineering project management, engineering requirements, engineering design, engineering construction, and engineering validation. The concept is so new that it is rarely understood, and it is widely misinterpreted, including in software engineering textbooks, papers, and among the communities of programmers and crafters. One of the core issues in software engineering is that its approaches are not empirical enough because a real-world validation of approaches is usually absent, or very limited and hence software engineering is often misinterpreted as feasible only in a "theoretical environment" which is not true because engineering approaches in general can be applied to solve real-world problems more efficiently and effectively than craft. It is the higher education which is failing to promulgate the true meaning and curriculum of software engineering because the focus of universities is to teach critical thinking and reading / research. Dijkstra who developed computer languages in the last century refuted the concepts of "software engineering" which was prevalent thirty years ago in the 1980s, arguing that those terms were poor analogies for what he called the "radical novelty" of computer science: A number of these phenomena have been bundled under the name "Software Engineering". As economics is known as "The Miserable Science", software engineering should be known as "The Doomed Discipline", doomed because it cannot even approach its goal since its goal is self-contradictory. Software engineering, of course, presents itself as another worthy cause, but that is eyewash: if you carefully read its literature and analyse what its devotees actually do, you will discover that software engineering has accepted as its charter "How to program if you cannot."[45] See also[edit] Software portal Software Testing portal Main article: Outline of software engineering Bachelor of Science in Information Technology Bachelor of Software Engineering List of software engineering conferences List of software engineering publications Software craftsmanship Software Engineering Institute Notes[edit] ^ a b Abran et al. 2004, pp. 1–1 ^ ACM (2007). "Computing Degrees & Careers". ACM. Retrieved 2010-11-23.  ^ Laplante first=Phillip (2007). What Every Engineer Should Know about Software Engineering. Boca Raton: CRC. ISBN 978-0-8493-7228-5. Retrieved 2011-01-21.  ^ Leondes (2002). intelligent systems: technology and applications. CRC Press. p. I-6. ISBN 978-0-8493-1121-5. 1.4 Computers and a First Glimpse at Al (1940s)  ^ Dijkstra, E. W. (March 1968). "Go To Statement Considered Harmful". Communications of the ACM 11 (3): 147–148. doi:10.1145/362929.362947. Retrieved 2009-08-10.  ^ Parnas, David (December 1972). "On the Criteria To Be Used in Decomposing Systems into Modules". Communications of the ACM 15 (12): 1053–1058. doi:10.1145/361598.361623. Retrieved 2008-12-26.  ^ "Software Engineering".  ^ Sommerville 2008, p. 26 ^ Peter, Naur; Brian Randell (7–11 October 1968). "Software Engineering: Report of a conference sponsored by the NATO Science Committee" (PDF). Garmisch, Germany: Scientific Affairs Division, NATO. Retrieved 2008-12-26.  ^ Randell, Brian (10 August 2001). "The 1968/69 NATO Software Engineering Reports". Brian Randell's University Homepage. The School of the Computer Sciences, Newcastle University. Retrieved 2008-10-11. The idea for the first NATO Software Engineering Conference, and in particular that of adopting the then practically unknown term "software engineering" as its (deliberately provocative) title, I believe came originally from Professor Fritz Bauer.  ^ Boehm (1981). Software Engineering Economics. Prentice-Hall. ISBN 0-13-822122-7.  ^ Humphrey, Watts S. (1989). Managing the Software Process. Addison-Wesley. ISBN 0-201-18095-2.  ^ "ISO/IEC TR 19759:2005". Retrieved 2012-04-01.  ^ Abran, Alain, ed. (2005) [2004]. "Chapter 1: Introduction to the Guide". Guide to the Software Engineering Body of Knowledge. Los Alamitos: IEEE Computer Society. ISBN 0-7695-2330-7. Retrieved 2010-09-13. The total volume of cited literature is intended to be suitable for mastery through the completion of an undergraduate education plus four years of experience.  ^ "SE2004 Software Engineering Curriculum". Sites.computer.org. 2003-09-30. Retrieved 2012-03-25.  ^ [1] Degree programs in Software Engineering ^ Williams, N.S.W. (19–21 February 2001). "Software Engineering Education and Training, 2001 Proceedings. 14th Conference on". Charlotte, NC: IEEE. pp. 77–78.  |chapter= ignored (help) ^ "NCEES Software Engineering Exam Specifications". Retrieved 2012-04-01.  ^ "'SWEBOK Guide Version 3'". Retrieved 2012-11-14.  ^ "''Software Engineering Code of Ethics''" (PDF). Retrieved 2012-03-25.  ^ Bureau of Labor Statistics, U.S. Department of Labor, USDL 05-2145: Occupational Employment and Wages, November 2004, Table 1. ^ "Software Engineering". Retrieved 2008-02-01.  ^ "Computer Software Engineers and Computer Programmers". Retrieved 2009-12-17.  ^ Kalwarski, Tara; Daphne Mosher, Janet Paskin and Donna Rosato (2006). "Best Jobs in America". MONEY Magazine. CNN. Retrieved 2006-04-20.  Cite uses deprecated parameters (help) ^ "Best and Worst Jobs of 2012". online.wsj.com. Retrieved 2012.  ^ "SEI certification page". Sei.cmu.edu. Retrieved 2012-03-25.  ^ Wyrostek, Warren (March 14, 2008). "The Top 10 Problems with IT Certification in 2008". InformIT. Retrieved 2009-03-03.  ^ IEEE Computer Society. "2006 IEEE computer society report to the IFIP General Assembly" (PDF). Retrieved 2007-04-10.  ^ IEEE. "CSDA". Retrieved 2010-04-20.  ^ ACM (July 17, 2000). "A Summary of the ACM Position on Software Engineering as a Licensed Engineering Profession". Association for Computing Machinery (ACM). Retrieved 2009-03-03. At its meeting in May 2000, the Council further concluded that the framework of a licensed professional engineer, originally developed for civil engineers, does not match the professional industrial practice of software engineering. Such licensing practices would give false assurances of competence even if the body of knowledge were mature; and would preclude many of the most qualified software engineers from becoming licensed. [dead link] ^ Canadian Information Processing Society. "I.S.P. Designation". Retrieved 2007-03-15.  ^ "Professional Engineers Ontario: Welcome to PEO's website". Peo.on.ca. Retrieved 2012-03-25.  ^ Thibodaux, Patrick (2006-05-05). "As outsourcing gathers steam, computer science interest wanes". Computerworld.com. Retrieved 2012-03-25.  ^ "Computer Programmers". Bls.gov. Retrieved 2012-03-25.  ^ Mullins, Robert (2007-03-13). "Software developer growth slows in North America". InfoWorld. Retrieved 2012-03-25.  ^ "Gartner Magic Quadrant". Cognizant.com. Retrieved 2012-03-25.  ^ Casey, Valentine (2010-08-20). "Virtual software team project management". Springer. Retrieved 2013-12-06.  ^ “IEEE Standard Glossary of Software Engineering Terminology,” IEEE std 610.12-1990, 1990. ^ Sommerville, Ian (2007) [1982]. "1.1.2 What is software engineering?". Software Engineering (8th ed.). Harlow, England: Pearson Education. p. 7. ISBN 0-321-31379-8. Software engineering is an engineering discipline that is concerned with all aspects of software production from the early stages of system specification to maintaining the system after it has gone into use. In this definition, there are two key phrases: 1. Engineering discipline Engineers make things work. They apply theories, methods and tools where these are appropriate [. . .] Engineers also recognize that they must work to organizational and financial constraints. [. . .] 2. All aspects of software production Software engineering is not just concerned with the technical processes of software development but also with activities such as software project management and with the development of tools, methods and theories to support software production.  ^ "Software Engineering". Information Processing (North-Holland Publishing Co.) 71: 530–538. 1972.  ^ Akram I. Salah (2002-04-05). "Engineering an Academic Program in Software Engineering". 35th Annual Midwest Instruction and Computing Symposium. Retrieved 2006-09-13. : "For some, software engineering is just a glorified name for programming. If you are a programmer, you might put 'software engineer' on your business card—never 'programmer' though." ^ Mills, Harlan D., J. R. Newman, and C. B. Engle, Jr., "An Undergraduate Curriculum in Software Engineering," in Deimel, Lionel E. (1990). Software Engineering Education: SEI Conference 1990, Pittsburgh, Pennsylvania, USA, April 2–3,... Springer. ISBN 0-387-97274-9. ,p. 26: "As a practical matter, we regard software engineering as the necessary preparation for the practicing, software development and maintenance professional. The Computer Scientist is preparing for further theoretical studies..." ^ David Budgen, Pearl Brereton, Barbara Kitchenham, Stephen Linkman (2004-12-14). "Realizing Evidence-based Software Engineering". Retrieved 2006-10-18. : "We believe that software engineering can only advance as an engineering discipline by moving away from its current dependence upon advocacy and analysis,...." ^ Beck, Kent; et al. (2001). "Manifesto for Agile Software Development". Agile Alliance. Retrieved 14 June 2010.  ^ Dijkstra, E. W. (1988). "On the cruelty of really teaching computing science". Retrieved 2014-01-10.  References[edit] Abran, Alain; Moore, James W.; Bourque, Pierre; Dupuis, Robert; Tripp, Leonard L. (2004). Guide to the Software Engineering Body of Knowledge. IEEE. ISBN 0-7695-2330-7.  Sommerville, Ian (2008). Software Engineering (7 ed.). Pearson Education. ISBN 978-81-7758-530-8. Retrieved 10 January 2013.  Further reading[edit] Ghezzi, Carlo; Mehdi Jazayeri; Dino Mandrioli (2003) [1991]. Fundamentals of Software Engineering (2nd (International) ed.). Pearson Education @ Prentice-Hall.  Jalote, Pankaj (2005) [1991]. An Integrated Approach to Software Engineering (3rd ed.). Springer. ISBN 0-387-20881-X.  Pressman, Roger S (2009). Software Engineering: A Practitioner's Approach (7th ed.). Boston, Mass: McGraw-Hill. ISBN 978-0073375977.  Sommerville, Ian (2010) [2010]. Software Engineering (9th ed.). Harlow, England: Pearson Education. ISBN 978-0137035151.  Bruegge, Bernd; Dutoit, Allen (2009). (3rd ed.). Prentice Hall. ISBN 978-0136061250.  Missing or empty |title= (help) External links[edit] Guide to the Software Engineering Body of Knowledge The Open Systems Engineering and Software Development Life Cycle Framework OpenSDLC.org the integrated Creative Commons SDLC Software Engineering Institute Carnegie Mellon Wikimedia Commons has media related to Software engineering. Wikibooks has a book on the topic of: Introduction to Software Engineering Wikiversity has learning materials about Software engineering v t e Software engineering Fields Computer programming Software requirements Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software architecture Software development methodology Software development process Software quality Software quality assurance Software archaeology Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML SysML Software engineers Kent Beck Grady Booch Fred Brooks Barry Boehm Ward Cunningham Tom DeMarco Edsger W. Dijkstra Martin Fowler C. A. R. Hoare Watts Humphrey Michael A. Jackson Ivar Jacobson Stephen J. Mellor Bertrand Meyer David Parnas Winston W. Royce James Rumbaugh Niklaus Wirth Edward Yourdon Victor Basili Related fields Computer science Computer engineering Project management Systems engineering Category Commons v t e Engineering Civil engineering Architectural Construction Earthquake Hydraulic Mining Structural Geotechnical Transportation Mechanical engineering Aerospace Acoustical Automotive Marine Mechatronics Optical Railway Electrical engineering Computer Electronics Electromechanics Power Photonics Telecommunications Radio Frequency Chemical engineering Biochemical Biological Molecular Nanotechnology Process Reaction Thermodynamics Transport Phenomena Interdisciplinarity Mathematics and Computing Engineering Biomedical Environmental Industrial Materials science Robotics Military Nuclear Systems List of engineering branches  · Category:Engineering  · Engineering portal v t e Major fields of computer science Mathematical foundations Mathematical logic Set theory Number theory Graph theory Type theory Category theory Numerical analysis Information theory Combinatorics Boolean algebra Theory of computation Automata theory Computability theory Computational complexity theory Quantum computing theory Algorithms, data structures Analysis of algorithms Algorithm design Combinatorial optimization Computational geometry Programming languages, compilers Parsers Interpreters Procedural programming Object-oriented programming Functional programming Logic programming Programming paradigms Concurrent, parallel, distributed systems Multiprocessing Grid computing Concurrency control Software engineering Requirements analysis Software design Computer programming Formal methods Software testing Software development process System architecture Computer architecture Computer organization Operating systems Telecommunication, networking Computer audio Routing Network topology Cryptography Databases Database management systems Relational databases SQL Transactions Database indexes Data mining Artificial intelligence Automated reasoning Computational linguistics Computer vision Evolutionary computation Expert systems Machine learning Natural language processing Robotics Computer graphics Visualization Computer animation Image processing Human–computer interaction Computer accessibility User interfaces Wearable computing Ubiquitous computing Virtual reality Scientific computing Artificial life Bioinformatics Cognitive science Computational chemistry Computational neuroscience Computational physics Numerical algorithms Symbolic mathematics Note: Computer science can also be divided into different topics or fields according to the ACM Computing Classification System. v t e Technology Outline of technology Outline of applied science Fields Agriculture Agricultural engineering Aquaculture Fisheries science Food chemistry Food engineering Food microbiology Food technology GURT ICT Nutrition Biomedical Bioinformatics Biological engineering Biomechatronics Biomedical engineering Biotechnology Cheminformatics Genetic engineering Healthcare science Medical research Medical technology Nanomedicine Neuroscience Neurotechnology Pharmacology Reproductive technology Tissue engineering Buildings and Construction Acoustical engineering Architectural engineering Building services engineering Civil engineering Construction engineering Domestic technology Facade engineering Fire protection engineering Safety engineering Sanitary engineering Structural engineering Educational Educational software Digital technologies in education ICT in education Impact Multimedia learning Virtual campus Virtual education Energy Nuclear engineering Nuclear technology Petroleum engineering Soft energy technology Environmental Clean technology Clean coal technology Ecological design Ecological engineering Ecotechnology Environmental engineering Environmental engineering science Green building Green nanotechnology Landscape engineering Renewable energy Sustainable design Sustainable engineering Industrial Automation Business informatics Engineering management Enterprise engineering Financial engineering Industrial biotechnology Industrial engineering Metallurgy Mining engineering Productivity improving technologies Research and development Tribology IT and communications Artificial intelligence Broadcast engineering Computer engineering Computer science Information technology Music technology Ontology engineering RF engineering Software engineering Telecommunications engineering Visual technology Web engineering Military Army engineering maintenance Electronic warfare Military communications Military engineering Stealth technology Transport Aerospace engineering Automotive engineering Naval architecture Space technology Traffic engineering Transport engineering Other applied sciences Cryogenics Electro-optics Electronics Engineering geology Engineering physics Hydraulics Materials science Microfabrication Nanoengineering Other engineering fields Audio Biochemical Ceramic Chemical Polymer Control Electrical Electronic Entertainment Geotechnical Hydraulic Mechanical Mechatronics Optical Protein Quantum Robotics Animatronics Systems Components Infrastructure Invention Timeline Knowledge Machine Skill Craft Tool Gadget Scales Femtotechnology Picotechnology Nanotechnology Microtechnology Macro-engineering Megascale engineering History Prehistoric technology Neolithic Revolution Ancient technology Medieval technology Renaissance technology Industrial Revolution Second Jet Age Digital Revolution Information Age Theories and concepts Appropriate technology Critique of technology Diffusion of innovations Disruptive innovation Dual-use technology Ephemeralization Ethics of technology High tech Hype cycle Low-technology Mature technology Philosophy of technology Strategy of Technology Technicism Techno-progressivism Technocapitalism Technocentrism Technocracy Technocriticism Technoetic Technoethics Technogaianism Technological alliance Technological apartheid Technological change Technological convergence Technological determinism Technological escalation Technological evolution Technological fix Technological innovation system Technological momentum Technological nationalism Technological paradigm Technological rationality Technological revival Technological revolution Technological self-efficacy Technological singularity Singularitarianism Technological somnambulism Technological transitions Technological unemployment Technological utopianism Technology lifecycle Technology acceptance model Technology adoption lifecycle Technomancy Technorealism Technoromanticism Technoscience Transhumanism Other Emerging technologies List Fictional technology Technopaganism High-technology business districts Kardashev scale List of technologies Platform technology Science, technology and society Technology dynamics Science and technology by country STEM fields Pre-STEM women STEAM fields Technology alignment Technology assessment Technology brokering Technology companies Technology demonstration Technology education Technical universities and colleges Technology evangelist Technology fusion Technology governance Technology integration Technology journalism Technology management Technology policy Technology shock Technology strategy Technology and society Technology transfer Technophilia Technophobia Technoself Technosignature Technostress Terotechnology Book Category Commons Portal Wikiquotes Retrieved from "http://en.wikipedia.org/w/index.php?title=Software_engineering&oldid=637463928" Categories: Software engineering Engineering disciplines Hidden categories: CS1 errors: Chapter ignored Pages containing cite templates with deprecated parameters All articles with dead external links Articles with dead external links from October 2010 Articles containing potentially dated statements from 2010 All articles containing potentially dated statements Articles containing potentially dated statements from 2006 All articles with unsourced statements Articles with unsourced statements from March 2009 Articles with unsourced statements from December 2014 Pages with citations lacking titles Commons category with local link same as on Wikidata