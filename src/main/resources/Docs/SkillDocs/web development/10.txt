From Wikipedia, the free encyclopedia Jump to: navigation, search This article contains instructions, advice, or how-to content. The purpose of Wikipedia is to present facts, not to train. Please help improve this article either by rewriting the how-to content or by moving it to Wikiversity, Wikibooks or Wikivoyage (September 2009) Web application development is the process and practice of developing web applications. Contents 1 Risk 2 Technologies 3 Lifecycle Model 4 Testing 5 Tools 6 Frameworks and Reuse 7 See also 8 References 9 Further reading Risk[edit] Just as with a traditional desktop application, web applications have varying levels of risk. A personal home page is much less risky than, for example, a stock trading web site. For some projects security, software bugs, etc. are major issues. If time to market, or technical complexity is a concern, documentation, test planning, change control, requirements analysis, architectural description and formal design and construction practices can mitigate risk. Technologies[edit] Ajax ASP ASP.NET CSS ColdFusion Java JavaScript Perl PHP Ruby, including Ruby on Rails CGI Python Django HTML5 Wt Xojo Drupal Lifecycle Model[edit] Time to market, company-growth and requirements churn, three things that are emphasized in web-based business, coincide with the principles of the Agile practices. Some agile lifecycle models are: Extreme programming Scrum Timebox development Feature-driven development Testing[edit] Web applications undergo the same unit, integration and system testing as traditional desktop applications. But because web application clients vary so greatly, teams might perform some additional testing, such as: Security Performance, Load, and Stress HTML/CSS validation Accessibility Usability Cross-browser Many types of tests are automatable. At the component level, one of the xUnit packages can be a helpful tool. Or an organization can create its own unit testing framework. At the GUI level, Watir or iMacros are useful. Tools[edit] In the case of ASP.NET, a developer can use Microsoft Visual Studio to write code. But, as with most other programming languages, he/she can also use a text editor. Notepad++ is an example. WebORB Integration Server for .NET can be used to integrate .NET services, data and media with any web client. It includes developer productivity tools and APIs for remoting, messaging and data management. For ColdFusion and the related open source CFML engines, there are several tools available for writing code. These include Adobe Dreamweaver CS4, the CFEclipse plugin for Eclipse (software) and Adobe CF Builder. You can also use any text editor such as Notepad++ or TextEdit. For PHP, the Zend Development Environment provides numerous debugging tools and provides a rich feature set to make a PHP developer's life easier. WebORB Integration Server for PHP can be used to integrate PHP classes and data with any web client. It includes developer productivity tools and APIs for remoting, messaging and data management. Tools such as Hammerkit abstract PHP into a visual programming environment and utilise component-based software methods to accelerate development. For Java (programming language), there are many tools. The most popular is Apache Tomcat, but there are many others. One very specific one is WebORB Integration Server which can be used to integrate Java services, data and media with any web client. It includes developer productivity tools and APIs for remoting, messaging and data management. Several code generation tools such as nuBuilder, dbQwikSite or M-Power are available to automate the development of code. Using such tools, non-technical users can produce working code, and experienced coders can accelerate the development cycle. Other tools include various browsers, FTP clients, etc. See Category:Web development software. This section requires expansion. (May 2008) Frameworks and Reuse[edit] Main article: Web application framework Practicing code reuse and using web application frameworks can greatly improve both productivity and time to market (McConnell 1996:537). Reusing externally developed components can allow an organization to reap the above benefits, while potentially saving money. However, for smaller components, it might be just as easy to develop your own components as it would be to learn new APIs. Also, if a component is essential to the business, an organization might want to control its development. See also[edit] Software Testing portal Device Independence List of Web based applications Web Interoperability Web application framework References[edit] McConnell, Steve (June 2004). Code Complete, Second Edition. Microsoft Press. p. 960. ISBN 0-7356-1967-0.  McConnell, Steve (July 2, 1996). Rapid Development. Microsoft Press. p. 680. ISBN 1-55615-900-5.  Rozanski, Nick; Eóin Woods (April 20, 2005). Software Systems Architecture: Working With Stakeholders Using Viewpoints and Perspectives. Addison-Wesley Professional. p. 576. ISBN 0-321-11229-6.  Leffingwell, Dean; Don Widrig (May 16, 2003). Managing Software Requirements: A Use Case Approach, Second Edition. Addison-Wesley Professional. p. 544. ISBN 0-321-12247-X.  Further reading[edit] Whittaker, James A.; Mike Andrews (February 2, 2006). How to Break Web Software: Functional and Security Testing of Web Applications and Web Services. Addison-Wesley Professional. p. 240. ISBN 0-321-36944-0.  Retrieved from "http://en.wikipedia.org/w/index.php?title=Web_application_development&oldid=626765850" Categories: Web applications Web development Hidden categories: Articles needing cleanup from September 2009 All pages needing cleanup Articles containing how-to sections Articles to be expanded from May 2008 All articles to be expanded