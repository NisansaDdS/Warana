From Wikipedia, the free encyclopedia Jump to: navigation, search The Nexus 4, part of the Google Nexus series, a line of "developer-friendly" devices.[1] Android software development is the process by which new applications are created for the Android operating system. Applications are usually developed in the Java programming language using the Android Software Development Kit, but other development tools are available. As of July 2013[update], more than 1 million applications have been developed for Android,[2] with over 25 billion downloads.[3][4] A June 2011 research indicated that over 67% of mobile developers used the platform, at the time of publication.[5] In Q2 2012, around 105 million units of Android smartphones were shipped which acquires a total share of 68% in overall smartphones sale till Q2 2012.[6] Contents 1 Official development tools 1.1 Android SDK 1.1.1 Android Debug Bridge 1.1.2 Fastboot 1.2 Native development kit 1.3 Android Open Accessory Development Kit 2 Third-party development tools 2.1 Android APIMiner 2.2 AndroWish 2.3 App Inventor for Android 2.4 Basic4android 2.5 HyperNext Android Creator 2.6 Kivy 2.7 Processing 2.8 Qt for Android 2.9 RFO Basic! 2.10 Saphir 2.11 SDL 2.12 The Simple project 2.13 WinDev Mobile 3 Android Developer Challenge 4 Community-based firmware 5 Java standards 6 History 7 See also 8 References 9 Bibliography 10 External links Official development tools[edit] Android SDK[edit] Android Software Development Kit (Android SDK) Developer(s) Google Stable release 23.0.5 / October 2014; 2 months ago (2014-10)[7] Written in Java Operating system Cross-platform Available in English Type IDE, SDK Website developer.android.com/tools/sdk/eclipse-adt.html The Android software development kit (SDK) includes a comprehensive set of development tools.[8] These include a debugger, libraries, a handset emulator based on QEMU, documentation, sample code, and tutorials. Currently supported development platforms include computers running Linux (any modern desktop Linux distribution), Mac OS X 10.5.8 or later, and Windows XP or later. For the moment one can also develop Android software on Android itself by using the AIDE - Android IDE - Java, C++ app and the Java editor app. The officially supported integrated development environment (IDE) is Eclipse using the Android Development Tools (ADT) Plugin, though IntelliJ IDEA IDE (all editions) fully supports Android development out of the box,[9] and NetBeans IDE also supports Android development via a plugin.[10] Additionally, developers may use any text editor to edit Java and XML files, then use command line tools (Java Development Kit and Apache Ant are required) to create, build and debug Android applications as well as control attached Android devices (e.g., triggering a reboot, installing software package(s) remotely).[11] Enhancements to Android's SDK go hand in hand with the overall Android platform development. The SDK also supports older versions of the Android platform in case developers wish to target their applications at older devices. Development tools are downloadable components, so after one has downloaded the latest version and platform, older platforms and tools can also be downloaded for compatibility testing.[12] Android applications are packaged in .apk format and stored under /data/app folder on the Android OS (the folder is accessible only to the root user for security reasons). APK package contains .dex files[13] (compiled byte code files called Dalvik executables), resource files, etc. Android Debug Bridge[edit] The Android Debug Bridge (ADB) is a toolkit included in the Android SDK package. It consists of both client and server-side programs that communicate with one another. The ADB is typically accessed through the command-line interface,[14] although numerous graphical user interfaces exist to control ADB. The format for issuing commands through the ADB is typically: 
adb [-d|-e|-s <serialNumber>] <command>
 In a security issue reported in March 2011, ADB was targeted as a vector to attempt to install a rootkit on connected phones using a "resource exhaustion attack".[15] Fastboot[edit] "Fastboot" redirects here. For the PC fast booting ability, see Instant-on. Fastboot is a diagnostic protocol included with the SDK package used primarily to modify the flash filesystem via a USB connection from host computer. It requires that the device be started in a boot loader or Second Program Loader mode in which only the most basic hardware initialization is performed. After enabling the protocol on the device itself, it will accept a specific set of commands sent to it via USB using a command line. Some of the most commonly used fastboot commands include: flash – rewrites a partition with a binary image stored on the host computer erase – erases a specific partition reboot – reboots the device into either the main operating system, the system recovery partition or back into its bootloader devices – displays a list of all devices (with the serial number) connected to the host computer format – formats a specific partition; the file system of the partition must be recognized by the device Native development kit[edit] Android Native Development Kit (Android NDK) Developer(s) Google Initial release June 2009; 5 years ago (2009-06)[16] Stable release 10c / October 2014; 2 months ago (2014-10)[16] Written in C and C++ Operating system Cross-platform Available in English Type IDE, SDK Website developer.android.com/tools/sdk/ndk/index.html Libraries written in C, C++ and other languages can be compiled to ARM, MIPS or x86 native code and installed using the Android Native Development Kit. Native classes can be called from Java code running under the Dalvik VM using the System.loadLibrary call, which is part of the standard Android Java classes.[17][18] Complete applications can be compiled and installed using traditional development tools.[19] However, according to the Android documentation, NDK should not be used solely for developing applications only because the developer prefers to program in C/C++, as using NDK increases complexity while most applications would not benefit from using it.[20] The ADB debugger gives a root shell under the Android Emulator which allows ARM, MIPS or x86 native code to be uploaded and executed. Native code can be compiled using GCC or the Intel C++ Compiler on a standard PC.[21] Running native code is complicated by Android's use of a non-standard C library (libc, known as Bionic). The graphics library that Android uses to arbitrate and control access to this device is called the Skia Graphics Library (SGL), and it has been released under an open source licence.[22] Skia has backends for both Win32 and Unix, allowing the development of cross-platform applications, and it is the graphics engine underlying the Google Chrome web browser.[23] Unlike Java application development based on the Eclipse IDE, the NDK is based on command-line tools and requires invoking them manually to build, deploy and debug the apps. Several third-party tools allow integrating the NDK into Eclipse[24] and Visual Studio.[25] Android Open Accessory Development Kit[edit] The Android 3.1 platform (also backported to Android 2.3.4) introduces Android Open Accessory support, which allows external USB hardware (an Android USB accessory) to interact with an Android-powered device in a special "accessory" mode. When an Android-powered device is in accessory mode, the connected accessory acts as the USB host (powers the bus and enumerates devices) and the Android-powered device acts as the USB device. Android USB accessories are specifically designed to attach to Android-powered devices and adhere to a simple protocol (Android accessory protocol) that allows them to detect Android-powered devices that support accessory mode.[26] Third-party development tools[edit] Android APIMiner[edit] Android APIMiner is a platform that automatically instruments the Javadoc documentation of the Android API with examples of usage, extracted from real open-source Android applications.[27] To improve the quality of the extracted examples, APIMiner relies on an intra-procedural static slicing algorithm. AndroWish[edit] AndroWish is an on-device Tcl/Tk interpreter which provides multi-windows GUI and give access to Bluetooth, USB, network sockets, text-to-speech, speech recognition, sensor, location (GPS or network information), activity manager, SQLite and sound. The GUI layer relies on SDL2. AndroWish is provided with 337 Tcl packages.[28] App Inventor for Android[edit] Main article: Google App Inventor On July 12, 2010, Google announced the availability of App Inventor for Android, a Web-based visual development environment for novice programmers, based on MIT's Open Blocks Java library and providing access to Android devices' GPS, accelerometer and orientation data, phone functions, text messaging, speech-to-text conversion, contact data, persistent storage, and Web services, initially including Amazon and Twitter.[29] "We could only have done this because Android’s architecture is so open," said the project director, MIT's Hal Abelson.[30] Under development for over a year,[31] the block-editing tool has been taught to non-majors in computer science at Harvard, MIT, Wellesley, Trinity College (Hartford,) and the University of San Francisco, where Professor David Wolber developed an introductory computer science course and tutorial book for non-computer science students based on App Inventor for Android.[32][33] In the second half of 2011, Google released the source code, terminated its Web service, and provided funding for the creation of The MIT Center for Mobile Learning, led by the App Inventor creator Hal Abelson and fellow MIT professors Eric Klopfer and Mitchel Resnick.[34][35] Latest version created as the result of Google–MIT collaboration was released in February 2012, while the first version created solely by MIT was launched in March 2012[36] and upgraded to App Inventor 2 in December 2013.[37] As of 2014, App inventor is now maintained by MIT.[citation needed] Basic4android[edit] Basic4android is a commercial product similar to Simple.[38] It is inspired by Microsoft Visual Basic 6 and Microsoft Visual Studio. It makes android programming much simpler for regular Visual Basic programmers who find coding in Java difficult. Basic4android is very active, and there is a strong online community of Basic4android developers. HyperNext Android Creator[edit] Main article: HyperNext HyperNext Android Creator (HAC) is a software development system aimed at beginner programmers that can help them create their own Android apps without knowing Java and the Android SDK. It is based on HyperCard that treated software as a stack of cards with only one card being visible at any one time and so is well suited to mobile phone applications that have only one window visible at a time. HyperNext Android Creator's main programming language is simply called HyperNext and is loosely based on Hypercard's HyperTalk language. HyperNext is an interpreted English-like language and has many features that allow creation of Android applications. It supports a growing subset of the Android SDK including its own versions of the GUI control types and automatically runs its own background service so apps can continue to run and process information while in the background. Kivy[edit] Kivy is an open source Python library for developing multitouch application software with a natural user interface (NUI) for a wide selection of devices. Kivy provides the possibility of maintaining a single application for numerous operating systems ("code once, run everywhere"). Kivy has a custom-built deployment tool for deploying mobile applications called Buildozer, which is available only for Linux. Buildozer is currently alpha software, but is far less cumbersome than older Kivy deployment methods. Applications programmed with Kivy can be submitted to any Android mobile application distribution platform. Processing[edit] The Processing environment, which also uses the Java language, has supported an Android mode since version 1.5; integration with device camera and sensors is possible using the Ketai library. Qt for Android[edit] Main article: Qt (software) Qt for Android enables Qt 5 applications to run on devices with Android v2.3.3 (API level 10) or later.[39] Qt is a cross-platform application framework which can target platforms such as Android, Linux, iOS, Sailfish OS and Windows. Qt application development is done in standard C++ and JavaScript. Qt application development requires both the Android NDK and JDK.[40] Qt Creator is the integrated development environment provided with the Qt Framework for multi-platform application development. RFO Basic![edit] RFO Basic (a dialect of Dartmouth Basic) is a free on-device interpreter providing access to hardware, sensors, sound, graphics, multitouch, file system, SQLite, network sockets, FTP, HTTP, Bluetooth, HTML GUI, encryption, SMS, phone, email, text-to-speech, voice recognition, GPS, math, strings, lists and other essentials. It is an open source project which can produce stand-alone Android APK files.[41] Development of RFO Basic is active, and there is a strong online community of RFO Basic! developers. Saphir[edit] Saphir is a fork of the open source Rebol 3 (R3) interpreter.[42] All R3 functionality, including GUI, graphics, network access, file access, parse, and other core features are portable across Android, Windows, Mac, and Linux platforms, without any changes to source code. Saphir makes use of concise dialect (DSL) code patterns to build graphic user interfaces and to perform common computational operations, with remarkably short and readable code syntax. The trivial size of the interpreter (.5 - 1.5 megabytes) complements Saphir's simple utilitarian design. SDL[edit] The SDL library offers also a development possibility beside Java, allowing the development with C and the simple porting of existing SDL and native C applications. By injection of a small Java shim and JNI the usage of native SDL code is possible,[43] allowing Android ports like e.g. the Jagged Alliance 2 video game.[44] The Simple project[edit] The goal of Simple is to bring an easy-to-learn-and-use language to the Android platform.[45] Simple is a BASIC dialect for developing Android applications. It targets professional and non-professional programmers alike in that it allows programmers to quickly write Android applications that use the Android runtime components. Similar to Microsoft Visual Basic 6, Simple programs are form definitions (which contain components) and code (which contains the program logic). The interaction between the components and the program logic happens through events triggered by the components. The program logic consists of event handlers which contain code reacting to the events. The Simple project is not very active,[46] the last source code update being in August 2009. WinDev Mobile[edit] WinDev Mobile is a proprietary IDE created by PC SOFT and is used to create graphical user interface (GUI) applications for smartphones and tablets (including Android devices). It uses the WLanguage as its programming language, which is available in English, French and Chinese. Android Developer Challenge[edit] Main article: Android Developer Challenge The Android Developer Challenge was a competition to find the most innovative application for Android. Google offered prizes totaling 10 million US dollars, distributed between ADC I and ADC II. ADC I accepted submissions from January 2 to April 14, 2008. The 50 most promising entries, announced on May 12, 2008, each received a $25,000 award to further development.[47][48] It ended in early September with the announcement of ten teams that received $275,000 each, and ten teams that received $100,000 each.[49] ADC II was announced on May 27, 2009.[50] The first round of the ADC II closed on October 6, 2009.[51] The first-round winners of ADC II comprising the top 200 applications were announced on November 5, 2009. Voting for the second round also opened on the same day and ended on November 25. Google announced the top winners of ADC II on November 30, with SweetDreams, What the Doodle!? and WaveSecure being nominated the overall winners of the challenge.[52][53] Community-based firmware[edit] There is a community of open-source enthusiasts that build and share Android-based firmware with a number of customizations and additional features, such as FLAC lossless audio support and the ability to store downloaded applications on the microSD card.[54] This usually involves rooting the device. Rooting allows users root access to the operating system, enabling full control of the phone. Rooting has several disadvantages as well, including increased risk of hacking, high chances of bricking, losing warranty, increased virus attack risks, etc.[55] However, rooting allows custom firmwares to be installed, although the device's bootloader must also be unlocked. Modified firmwares allow users of older phones to use applications available only on newer releases.[56] Those firmware packages are updated frequently, incorporate elements of Android functionality that haven't yet been officially released within a carrier-sanctioned firmware, and tend to have fewer limitations. CyanogenMod and OMFGB are examples of such firmware. On September 24, 2009, Google issued a cease and desist letter[57] to the modder Cyanogen, citing issues with the re-distribution of Google's closed-source applications[58] within the custom firmware. Even though most of Android OS is open source, phones come packaged with closed-source Google applications for functionality such as the Android Market and GPS navigation. Google has asserted that these applications can only be provided through approved distribution channels by licensed distributors. Cyanogen has complied with Google's wishes and is continuing to distribute this mod without the proprietary software. It has provided a method to back up licensed Google applications during the mod's install process and restore them when the process is complete.[59] Java standards[edit] Obstacles to development include the fact that Android does not use established Java standards, that is, Java SE and ME. This prevents compatibility between Java applications written for those platforms and those written for the Android platform. Android only reuses the Java language syntax and semantics, but it does not provide the full class libraries and APIs bundled with Java SE or ME.[60] However, there are multiple tools in the market from companies such as Myriad Group and UpOnTek that provide Java ME to Android conversion services.[61][62][63] History[edit] Early Android device Android was created by the Open Handset Alliance which is led by Google.[64] The early feedback on developing applications for the Android platform was mixed.[65] Issues cited include bugs, lack of documentation, inadequate QA infrastructure, and no public issue-tracking system. (Google announced an issue tracker on January 18, 2008.)[66] In December 2007, MergeLab mobile startup founder Adam MacBeth stated, "Functionality is not there, is poorly documented or just doesn't work... It's clearly not ready for prime time."[67] Despite this, Android-targeted applications began to appear the week after the platform was announced. The first publicly available application was the Snake game.[68][69] The Android Dev Phone is a SIM-unlocked and hardware-unlocked device that is designed for advanced developers. While developers can use regular consumer devices purchased at retail to test and use their applications, some developers may choose not to use a retail device, preferring an unlocked or no-contract device. A preview release of the Android SDK was released on November 12, 2007. On July 15, 2008, the Android Developer Challenge Team accidentally sent an email to all entrants in the Android Developer Challenge announcing that a new release of the SDK was available in a "private" download area. The email was intended for winners of the first round of the Android Developer Challenge. The revelation that Google was supplying new SDK releases to some developers and not others (and keeping this arrangement private) led to widely reported frustration within the Android developer community at the time.[70] On August 18, 2008, the Android 0.9 SDK beta was released. This release provided an updated and extended API, improved development tools and an updated design for the home screen. Detailed instructions for upgrading are available to those already working with an earlier release.[citation needed] On September 23, 2008, the Android 1.0 SDK (Release 1) was released.[71] According to the release notes, it included "mainly bug fixes, although some smaller features were added." It also included several API changes from the 0.9 version. Multiple versions have been released since it was developed .[72] See also[edit] Android Studio List of open source Android applications Rooting (Android OS) References[edit] ^ Syed H (September 24, 2012). "Editorial: Why You Should Go Nexus". Droid Lessons. Retrieved April 17, 2013.  ^ Google Play REaches 1 Million apps ^ "Android App Stats". Archived from the original on January 2, 2011. Retrieved December 31, 2010.  ^ Leena Rao (April 14, 2011). "Google: 3 Billion Android Apps Installed; Downloads Up 50 Percent From Last Quarter". Techcrunch. Archived from the original on April 25, 2011. Retrieved May 13, 2011.  ^ "Developer Economics 2011".  ^ Android and iOS Surge to New Smartphone OS Record in Second Quarter, According to IDC ^ "SDK Tools | Android Developers". Developer.android.com. Retrieved November 8, 2014.  ^ "Tools Overview". Android Developers. July 21, 2009.  ^ "IntelliJ Android Development". Retrieved September 19, 2012.  ^ "NBAndroid Plugin". Retrieved September 19, 2012.  ^ Westfall, Jon (August 25, 2009). "Backup & Restore Android Apps Using ADB". JonWestfall.com. Retrieved December 7, 2009.  ^ "SDK Tools".  ^ "Android SDK Glossary".  ^ "Android Debug Bridge | Android Developers" Accessed December 27, 2012 ^ Lemos, Robert "Open source vulnerabilities paint a target on Android" March 25, 2011, accessed December 27, 2012 ^ a b "Android NDK | Android Developers". Developer.android.com. November 13, 2012. Retrieved March 13, 2014.  ^ Srinivas, Davanum (December 9, 2007). "Android — Invoke JNI based methods (Bridging C/C++ and Java)". Archived from the original on December 16, 2008. Retrieved December 13, 2008.  ^ "java.lang.System". Android Developers. Retrieved September 3, 2009.  ^ Leslie, Ben (November 13, 2007). "Native C application for Android". Benno's blog. Archived from the original on September 13, 2009. Retrieved September 4, 2009.  ^ "Android NDK | Android Developers". Developer.android.com. November 13, 2012. Retrieved June 17, 2014.  ^ "Intel C++ Compiler 14.0 for Android". Software.intel.com. Retrieved June 17, 2014.  ^ "Skia source".  ^ Toker, Alp (September 6, 2008). "Skia graphics library in Chrome: First impressions". Archived from the original on December 16, 2008. Retrieved December 13, 2008.  ^ "Using Eclipse for Android C/C++ Development".  ^ "Tutorial: Android Native Development with Visual Studio".  ^ "Accessory Development Kit | Android Developers". Developer.android.com. Retrieved October 2, 2012.  ^ "Android APIMiner".  ^ "AndroWish". tcl.tk. June 21, 2014. Retrieved July 3, 2014.  ^ Claburn, Thomas (July 12, 2010). "Google App Inventor Simplifies Android Programming". Information Week. Archived from the original on July 15, 2010. Retrieved July 12, 2010.  ^ Lohr, Steve (July 11, 2010). "Google’s Do-It-Yourself App Creation Software". New York Times. Archived from the original on July 13, 2010. Retrieved July 12, 2010.  ^ Abelson, Hal (July 31, 2009). "App Inventor for Android". Google Research Blog. Archived from the original on August 7, 2010. Retrieved July 12, 2010.  ^ Kim, Ryan (December 11, 2009). "Google brings app-making to the masses". San Francisco Chronicle. Archived from the original on July 17, 2010. Retrieved July 12, 2010.  ^ Wolber, David. "AppInventor.org". Archived from the original on July 15, 2010. Retrieved July 12, 2010.  ^ "App Inventor @ MIT".  ^ "MIT Launches New Center for Mobile Learning". August 16, 2011.  ^ Clark,first=Andrew (December 30, 2013). "App Inventor launches second iteration".  ^ "App Inventor Classic | Explore MIT App Inventor". Appinventor.mit.edu. December 3, 2013. Retrieved March 13, 2014.  ^ "Basic4android".  ^ "Qt for Android".  ^ "Qt Wiki : Android".  ^ "rfobasic".  ^ "R3".  ^ "Simple DirectMedia Layer for Android". sdl.org. August 12, 2012. Retrieved September 9, 2012. How the port works, - Android applications are Java-based, optionally with parts written in C, - As SDL apps are C-based, we use a small Java shim that uses JNI to talk to the SDL library, - This means that your application C code must be placed inside an android Java project, along with some C support code that communicates with Java, - This eventually produces a standard Android .apk package  ^ JA2 Stracciatella Feedback » Jagged Alliance 2 Android Stracciatella Port RC2 Release - please test on the Bear's Pit Forum, October 3, 2011 ^ "Android Simple".  ^ "Source Code Changes List".  ^ Chen, Jason (May 12, 2008). "The Top 50 Applications". Android Developers Blog. Archived from the original on September 25, 2009. Retrieved September 4, 2009.  ^ Brown, Eric (May 13, 2008). "Android Developer Challenge announces first-round winners". Linux for Devices.  ^ "ADC I Top 50 Gallery". Android Developer Challenge. Retrieved May 19, 2009.  ^ "Android Developer Challenge". Google Code. Retrieved January 11, 2008.  ^ Chu, Eric (October 6, 2009). "ADC 2 Round 1 Scoring Complete". Android Developers Blog. Archived from the original on November 1, 2009. Retrieved November 3, 2009.  ^ "ADC 2 Overall Winners". Android Developer Challenge. Google. Archived from the original on January 4, 2011. Retrieved December 5, 2010.  ^ Kharif, Olga (November 30, 2009). "Android Developer Challenge 2 Winners Announced". BusinessWeek. Retrieved December 5, 2010.  ^ "Dream android development". xda-developers forum. Retrieved September 11, 2009.  ^ "Rooting: Advantages and Disadvantages". ITCSE forum. Retrieved September 21, 2013.  ^ "Android 2.1 from Motorola Droid Ported to G1". Volt Mobile. March 10, 2010.  ^ Wimberly, Taylor (September 24, 2009). "CyanogenMod in trouble?". Android and me. Archived from the original on October 3, 2009. Retrieved September 26, 2009.  ^ Morrill, Dan (September 25, 2009). "A Note on Google Apps for Android". Android Developers Blog. Archived from the original on October 25, 2009. Retrieved September 26, 2009.  ^ "The current state...". CyanogenMod Android Rom. September 27, 2009. Archived from the original on November 3, 2009. Retrieved September 27, 2009.  ^ van Gurp, Jilles (November 13, 2007). "Google Android: Initial Impressions and Criticism". Javalobby. Retrieved March 7, 2009. Frankly, I don't understand why Google intends to ignore the vast amount of existing implementation out there. It seems like a bad case of "not invented here" to me. Ultimately, this will slow adoption. There are already too many Java platforms for the mobile world and this is yet another one  ^ "Myriad's New J2Android Converter Fuels Android Applications Gold Rush". March 19, 2010.  ^ "J2Android hopes you don't know that Android is Java-based". March 23, 2010. On the other hand, you might think this is kind of a scam aimed at developers who don't really understand the nature of the platform they're targeting. My biggest complaint is that you'd think that Mikael Ricknäs, the IDG News Service reporter who wrote the first story linked to above (who toils for the same company that publishes JavaWorld), would have at least mentioned the relationship between Java and Android to make the oddness of this announcement clear.  ^ "Myriad CTO: J2Android moves MIDlets to "beautiful" Android framework". March 31, 2010. We will have to wait and see exactly how much pickup J2Android actually sees. The tool isn't actually available on the open market just yet; while Schillings spoke optimistically about "converting 1,000 MIDlets in an afternoon," at the moment they're working with a few providers to transform their back catalogs. So those of you out there hoping to avoid learning how to write Android code may have to wait a while.  ^ Android Development Tutorial ^ Paul, Ryan (December 19, 2007). "Developing apps for Google Android: it's a mixed bag". Ars Technica. Archived from the original on December 20, 2007. Retrieved December 19, 2007.  ^ Morrill, Dan (January 18, 2008). "You can't rush perfection, but now you can file bugs against it". Android Developers Blog. Retrieved September 3, 2009.  ^ Morrison, Scott (December 19, 2007). "Glitches Bug Google's Android Software". The Wall Street Journal. Retrieved December 19, 2007.  ^ "Snake". Android Freeware Directory. Retrieved January 26, 2008.  ^ "First Android Application — Snake". Mobiles2day. November 14, 2007. Retrieved January 7, 2008.  ^ Metz, Cade (July 14, 2008). "Google plays Hide and Seek with Android SDK". The Register. Archived from the original on October 6, 2008. Retrieved October 23, 2008.  ^ "Other SDK Releases". Android Developers. Retrieved September 2, 2009.  ^ "SDK Archives".  Bibliography[edit] Ed, Burnette (July 13, 2010). Hello, Android: Introducing Google's Mobile Development Platform (3rd ed.). Pragmatic Bookshelf. ISBN 978-1-934356-56-2.  Ableson, Frank; Sen, Robi; King, Chris (January 2011). Android in Action, Second Edition (2nd ed.). Manning. ISBN 978-1-935182-72-6.  Conder, Shane; Darcey, Lauren (July 24, 2012). Android Wireless Application Development Volume II: Advanced Topics (3rd ed.). Addison-Wesley Professional. ISBN 0-321-81384-7.  Murphy, Mark (June 26, 2009). Beginning Android (1st ed.). Apress. ISBN 1-4302-2419-3.  Meier, Reto (March 2010). Professional Android 2 Application Development (1st ed.). Wrox Press. ISBN 978-0-470-56552-0.  Haseman, Chris (July 21, 2008). Android Essentials (1st ed.). Apress. ISBN 1-4302-1064-8.  Clifton, Ian (August 3, 2012). The Essentials of Android Application Development LiveLessons (Video Training) (1st ed.). Addison-Wesley Professional. ISBN 0-13-299658-8.  External links[edit] Wikibooks has a book on the topic of: Android Android Developers Building for devices at source.android.com Android Debug Bridge - developer.android.com Android Debug Bridge - ADB Commands Android Tutorials for Beginners v t e Android Development Android Runtime (ART) Android software development Android Studio Android application package (APK) App Inventor Dalvik Developer Challenge Developer Lab Eclipse Google Developers Google I/O Renderscript Releases Ice Cream Sandwich Jelly Bean Lollipop Derivatives Android Auto Android TV Android Wear Nexus devices Galaxy Nexus Nexus One Nexus 4 Nexus 5 Nexus 6 Nexus 7 1st gen 2nd gen Nexus 9 Nexus 10 Nexus Q Nexus Player Nexus S Google Play edition HTC One (M7) HTC One (M8) LG G Pad 8.3 Moto G Samsung Galaxy S4 Sony Xperia Z Ultra Forks and distributions AOKP Baidu Yi Barnes & Noble Nook CyanogenMod LeWa OS MIUI Flyme OS OPhone OmniROM Replicant XobotOS Fire OS Nokia X Software Platform Ubuntu for Android Applications Earth Gmail Google Chrome for Android Goggles Hangouts Maps Navigation Play Books Music Newsstand Sky Talk Voice APIs Google Cloud Messaging Google Maps Google Play Services Google Search Alternative user interfaces Asus Zen UI HTC Sense LG Optimus UI Samsung TouchWiz Other Index of articles Free and open-source applications Google apps for Android Features Launchers Lawn statues Rooting Related topics Androidland Android One Google Google Cardboard Java and Android API Material design RootzWiki XDA Developers v t e Mobile operating systems Linux kernel Android Baidu Yi CyanogenMod Fire OS MIUI OPhone Replicant Yandex.Kit Ubuntu for Android Nokia X Software Platform SHR OpenEmbedded Familiar Linux OpenZaurus KaeilOS Openmoko Linux Qt Extended Improved Ångström Linux-based Others Access Linux EZX Linux Firefox OS LuneOS MotoMagx Sailfish OS Tizen Ubuntu Touch webOS XNU iOS QNX BlackBerry 10 BlackBerry Tablet OS Windows Windows Mobile Windows Phone Windows RT Other BlackBerry OS EPOC GEOS Nintendo DSi Nintendo 3DS S30 S40 Nokia Asha platform Palm OS PSP PS Vita Symbian MOAP(S) UIQ S60 S80 S90 List of mobile software distribution platforms Open Handset Alliance Open Mobile Alliance Mobile application development v t e Google Overview History List of mergers and acquisitions Products Criticism Censorship Domains Hoaxes Advertising AdMob Adscape AdSense AdWords Analytics Certification Program DoubleClick DoubleClick for Publishers Wallet Communication Alerts Apps Script Calendar Contacts Friend Connect Gmail history interface Google+ Groups Hangouts Inbox Sync Talk Text-to-Speech Translate Transliteration Voice Software Chrome for Android for iOS Chrome Web Store Apps Extensions Cloud Print Earth Sky Moon Mars Gadgets Goggles IME Pinyin Japanese Keep News & Weather Now Picasa OpenRefine Toolbar Platforms Account Android version history software development App Engine Apps Classroom Authenticator BigTable Body Books Library Project Caja Cardboard Chromecast Chrome OS Chromebook Chromebox Chrome Zone Compute Engine Contact Lens Custom Search Dart Earth Engine Fit Glass Go GFS Marketplace Native Client Nexus OpenSocial Play Books Music Newsstand Public DNS Q & A Google TV Wallet Development tools AJAX APIs App Inventor AtGoogleTalks Closure Tools Developers Gadgets API GData Googlebot Guava Guice GWS KML MapReduce Sitemaps Storage Summer of Code Web Toolkit Webmaster Tools Website Optimizer Swiffy Publishing Blogger Bookmarks Drive Docs, Sheets, Slides FeedBurner Map Maker Panoramio Picasa Web Albums Sites (JotSpot) YouTube Vevo Zagat Search (timeline) Appliance Audio Blog Search Books Finance Images Maps Street View Timeline Privacy concerns Competition Locations News Archive Patents Scholar Shopping Usenet Algorithms PageRank Panda Penguin Hummingbird Features Web History Personalized Real-Time Instant Search SafeSearch Voice Search Analysis Insights for Search Trends Knowledge Graph Knowledge Vault Discontinued Aardvark Answers Browser Sync Base Buzz Checkout Chrome Frame Click-to-Call Cloud Connect Code Search Currents Desktop Dictionary Dodgeball Fast Flip Gears GOOG-411 Jaiku Knol Health iGoogle Image Labeler Labs Latitude Lively Mashup Editor Notebook Offers Orkut Pack Page Creator Picnik PowerMeter Reader Script Converter SearchWiki Sidewiki Slide Squared Updater Urchin Videos Video Marketplace Wave Web Accelerator People Eric Schmidt Alan Eustace John Doerr John L. Hennessy Raymond Kurzweil Ann Mather Paul Otellini Ram Shriram Shirley M. Tilghman Matt Cutts Al Gore Rajen Sheth Vint Cerf Alan Mulally David Drummond Patrick Pichette Amit Singhal Jeff Dean Omid Kordestani Rachel Whetstone Salar Kamangar Sundar Pichai Susan Wojcicki Urs Hölzle Founders Larry Page Sergey Brin Other Art Project Calico (company) Current Chrome Experiments Code Jam Developer Day Google Business Groups Data Liberation Takeout Google Developer Expert Google Enterprise Driverless car Fiber Google China Google Shopping Express Googlization Grants Google.org I/O Logo Google Doodles 1998–2009 2010 2011 2012 2013 2014 Lunar X Prize Material design Motorola Mobility Science Fair Searchology Ventures WiFi X Projects Ara Loon Tango Real estate 111 Eighth Avenue Googleplex Related AI Challenge Bomb Goojje Monopoly City Streets Unity Project Category Commons Wikiversity v t e Linux Linux kernel History Kernel Linus's Law Linux-libre Linux startup process Linux kernel oops Tux more… Controversies GNU/Linux naming controversy Tanenbaum–Torvalds debate SCO and Linux Linux distributions General comparison Distributions list Netbook-specific comparison Distributions that run from RAM Lightweight Linux distribution Proprietary software for Linux Package management system Linux package formats Organizations List of Linux events Linux Foundation Linux Mark Institute Linux User Group (LUG) Linux Documentation Project LinuxChix Adoption Desktop Embedded Gaming Linux range of use List of Linux adopters LAMP Media Free Software Magazine Linux.com Linux Format Open Source For You Linux Gazette Linux Journal Linux Magazine LinuxUser Ubuntu User Linux Outlaws LugRadio LWN.net O3 Magazine Phoronix Revolution OS The Code (2001 film) People Alan Cox Allison Randal Andrew Morton Benjamin Mako Hill Bradley Kuhn Bruce Perens Daniel Robbins David S. Miller Greg Kroah-Hartman Ian Murdock Jon "maddog" Hall Jono Bacon Karen Sandler Linus Torvalds Mark Shuttleworth Matt Zimmerman Pamela Jones Patrick Volkerding Richard Stallman Theodore Ts'o William John Sullivan Linux Linux kernel features Retrieved from "http://en.wikipedia.org/w/index.php?title=Android_software_development&oldid=637321340" Categories: Smartphones Embedded Linux Mobile Linux Free mobile software Android (operating system) Android (operating system) development software Hidden categories: Use mdy dates from November 2014 Articles containing potentially dated statements from July 2013 All articles containing potentially dated statements All articles with unsourced statements Articles with unsourced statements from March 2014 Articles with unsourced statements from December 2014