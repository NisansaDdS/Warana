From Wikipedia, the free encyclopedia Jump to: navigation, search SOLID Principles Single responsibility Open/closed Liskov substitution Interface segregation Dependency inversion v t e In computer programming, SOLID (Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion) is a mnemonic acronym introduced by Michael Feathers for the "first five principles" named by Robert C. Martin[1][2] in the early 2000s[3] that stands for five basic principles of object-oriented programming and design. The principles, when applied together, intend to make it more likely that a programmer will create a system that is easy to maintain and extend over time.[3] The principles of SOLID are guidelines that can be applied while working on software to remove code smells by causing the programmer to refactor the software's source code until it is both legible and extensible. It is part of an overall strategy of agile and adaptive programming.[3] Contents 1 Overview 2 See also 2.1 Basic concepts and related topics 2.2 Design and development principles 3 References Overview[edit] Initial Stands for (acronym) Concept S SRP [4] Single responsibility principle a class should have only a single responsibility (i.e. only one potential change in the software's specification should be able to affect the specification of the class) O OCP [5] Open/closed principle “software entities … should be open for extension, but closed for modification.” L LSP [6] Liskov substitution principle “objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.” See also design by contract. I ISP [7] Interface segregation principle “many client-specific interfaces are better than one general-purpose interface.”[8] D DIP [9] Dependency inversion principle one should “Depend upon Abstractions. Do not depend upon concretions.”[8] Dependency injection is one method of following this principle. See also[edit] Basic concepts and related topics[edit] Adaptive Software Development Agile programming Code reuse Computer programming Object-oriented programming Inheritance (object-oriented programming) Occam's razor Design and development principles[edit] Package Principles DRY GRASP (object-oriented design) KISS YAGNI References[edit] ^ “Principles Of OOD”, Robert C. Martin (“Uncle BOB”), butunclebob.com, Last verified 2014-07-17. (Note the reference to “the first five principles”, though the acronym is not used in this article.) Dates back to at least 2003. ^ “Getting a SOLID start.”, Robert C. Martin (“Uncle Bob”), objectmentor.com. Last verified 2013-08-19. ^ a b c “SOLID Object-Oriented Design”, Sandi Metz (Duke University), Talk given at the 2009 Gotham Ruby Conference in May, 2009. Last verified 2009-01-15. ^ "Single Responsibility Principle".  ^ "Open/Closed Principle".  ^ "Liskov Substitution Principle".  ^ "Interface Segregation Principle".  ^ a b “Design Principles and Design Patterns”, Robert C. Martin (“Uncle Bob”), objectmentor.com. Last verified 2009-01-14. ^ "Dependency Inversion Principle".  This computer programming–related article is a stub. You can help Wikipedia by expanding it. v t e Retrieved from "http://en.wikipedia.org/w/index.php?title=SOLID_(object-oriented_design)&oldid=636586511" Categories: Software design Object-oriented programming Programming principles Computer programming stubs Hidden categories: All stub articles WikiProject Computer science stubs