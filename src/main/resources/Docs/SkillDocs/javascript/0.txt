W3Schools.com
HOME HTML CSS JAVASCRIPT SQL PHP JQUERY ANGULAR BOOTSTRAP XML ASP.NET MORE...REFERENCES | EXAMPLES | FORUM | ABOUT
JS Tutorial
JS HOME
JS Introduction
JS Where To
JS Output
JS Syntax
JS Statements
JS Comments
JS Variables
JS Data Types
JS Functions
JS Objects
JS Scope
JS Events
JS Strings
JS String Methods
JS Numbers
JS Number Methods
JS Operators
JS Math
JS Dates
JS Date Methods
JS Arrays
JS Array Methods
JS Booleans
JS Comparisons
JS Conditions
JS Switch
JS Loop For
JS Loop While
JS Breaks
JS RegExp
JS Type Of
JS Conversion
JS Errors
JS Debugging
JS Hoisting
JS Strict Mode
JS Style Guide
JS Best Practices
JS Mistakes
JS Performance
JS Reserved Words
JS JSON

JS Objects
Object Definitions
Object Properties
Object Methods
Object Prototypes

JS Functions
Function Definitions
Function Parameters
Function Invocation
Function Closures

JS HTML DOM
DOM Intro
DOM Methods
DOM Document
DOM Elements
DOM HTML
DOM CSS
DOM Events
DOM EventListener
DOM Navigation
DOM Nodes
DOM Nodelist

JS Browser BOM
JS Window
JS Screen
JS Location
JS History
JS Navigator
JS Popup Alert
JS Timing
JS Cookies

JS Libraries
JS Libraries
JS jQuery
JS Prototype

JS Examples
JS Examples
JS HTML DOM
JS HTML Input
JS HTML Objects
JS HTML Events
JS Browser
JS Quiz
JS Certificate
JS Summary

JS References
JavaScript Objects
HTML DOM Objects
JavaScript Tutorial

« W3Schools HomeNext Chapter »
JavaScript
JavaScript is the programming language of the Web.

All modern HTML pages are using JavaScript.

JavaScript is easy to learn.

This tutorial will teach you JavaScript from basic to advanced.

Examples in Each Chapter
With our "Try it Yourself" editor, you can change the examples and view the result.

Example

My First JavaScript
Click me to display Date and Time.

Try it Yourself »
If you are new to JavaScript, we recommend reading this tutorial, in the sequence listed in the left menu.

Learn by Examples
Examples are better than 1000 words. Examples are often easier to understand than text explanations.

This tutorial supplements all explanations with clarifying "Try it Yourself" examples.

Note	If you try all the examples, you will learn a lot about JavaScript, in a very short time!

Why Study JavaScript?
JavaScript is one of 3 languages all web developers must learn:

   1. HTML to define the content of web pages

   2. CSS to specify the layout of web pages

   3. JavaScript to program the behavior of web pages

This tutorial is about JavaScript, and how JavaScript works with HTML and CSS.

JavaScript Examples
Our tutorial pages contain hundreds of examples!

The Complete List of JavaScript Examples

JavaScript References
At W3Schools you will find a complete reference of all JavaScript, HTML DOM, and Browser objects.

The references contain examples for every object, every property, and every method.

Complete JavaScript Reference

JavaScript Quiz Test
Test your JavaScript skills at W3Schools!

Start JavaScript Quiz! 

JavaScript Exam - Get Your Diploma!
W3Schools Certification
W3Schools' Online Certification
The perfect solution for professionals who need to balance work, family, and career building.

More than 10 000 certificates already issued!

Get Your Certificate »


The HTML Certificate documents your knowledge of HTML.

The HTML5 Certificate documents your knowledge of advanced HTML5.

The CSS Certificate documents your knowledge of advanced CSS.

The JavaScript Certificate documents your knowledge of JavaScript and HTML DOM.

The jQuery Certificate documents your knowledge of jQuery.

The PHP Certificate documents your knowledge of PHP and SQL (MySQL).

The XML Certificate documents your knowledge of XML, XML DOM and XSLT.


« W3Schools HomeNext Chapter »
Search w3schools.com:
	
search
Select Language​▼
WEB HOSTING
WEB BUILDING
W3SCHOOLS EXAMS
HTML, CSS, JavaScript, PHP, jQuery, and XML Certifications
WEB STATISTICS
OS Statistics
Browser Statistics
Display Statistics
STYLE GUIDES
HTML Style Guide
JavaScript Style Guide
SHARE THIS PAGE
facebook

Top 10 Tutorials

» HTML Tutorial
» CSS Tutorial
» JavaScript Tutorial
» XML Tutorial
» SQL Tutorial
» PHP Tutorial
» ASP.NET Tutorial
» jQuery Tutorial
» Angular Tutorial
» Bootstrap Tutorial
Top 10 References

» HTML Reference
» CSS Reference
» JavaScript Reference
» Browser Statistics
» HTML DOM
» XML DOM
» PHP Reference
» jQuery Reference
» HTML Colors
» HTML Character Sets
Top 10 Examples

» HTML Examples
» CSS Examples
» JavaScript Examples
» HTML DOM Examples
» PHP Examples
» jQuery Examples
» XML Examples
» XML DOM Examples
» ASP Examples
» SVG Examples	
Web Certificates

» HTML Certificate
» HTML5 Certificate
» CSS Certificate
» JavaScript Certificate
» jQuery Certificate
» PHP Certificate
» XML Certificate
Color Picker

 colorpicker
 W3Schools.com REPORT ERROR | HOME | TOP | PRINT | FORUM | ABOUT | ADVERTISE WITH US
W3Schools is optimized for learning, testing, and training. Examples might be simplified to improve reading and basic understanding. Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content. While using this site, you agree to have read and accepted our terms of use, cookie and privacy policy. Copyright 1999-2014 by Refsnes Data. All Rights Reserved.
JavaScript
Learn the fundamentals of JavaScript, the programming language of the Web.
START
5m+
enrolled students
10 Hours
estimated course time
Beginner
required technical level
INTRODUCTION TO JAVASCRIPT

Getting Started with Programming
Time to become a coding champ.
Choose Your Own Adventure!
Let's create your very own "choose your own adventure" game.
FUNCTIONS

Introduction to Functions in JS
This course introduces functions, why we use them, and how to use them. The course also combines functions with other programming concepts previously learned.
Build "Rock, Paper, Scissors"
Make use of functions to program this game.
'FOR' LOOPS IN JAVASCRIPT

Introduction to 'For' Loops in JS
For loops are one of the most commonly used bits of code - it's so powerful and so useful!
Search Text for Your Name
Searching large blocks of text can be tedious, but with JavaScript, it's a breeze! In this project, we'll show you how to search long blocks of text for important information (such as your name).
'WHILE' LOOPS IN JAVASCRIPT

Introduction to 'While' Loops in JS
'While' loops are like 'for' loops, only they don't need a counter—they continue to run until their condition is met.
Dragon Slayer!
Let's use our knowledge of 'while' loops to defeat a dragon!
CONTROL FLOW

More on Control Flow in JS
When we tell a program what order to do things in, we're using something called control flow. You already know about 'if' statements, but in this course, we'll expand our knowledge!
Choose Your Own Adventure 2!
Every good game has a sequel.
DATA STRUCTURES

Arrays and Objects in JS
In this course, we'll cover some of the more powerful features of JavaScript in greater detail. We'll review arrays, create arrays of arrays, and begin learning about a new data structure: objects.
Contact List
With arrays and objects, we can create a contact list / phone book with ease.
OBJECTS I

Introduction to Objects I
An introduction to object oriented thinking in JavaScript. Objects are the building blocks of object oriented programming (OOP) so we begin here!
Building an Address Book
This project makes use of objects in the context of an address book.
OBJECTS II

Introduction to Objects II
A closer look at objects in JavaScript and an introduction to object-oriented programming concepts.
Building a Cash Register
The cash register has failed and the boss is not happy, help save the day and create your own cash register.
Logo--grey
Teaching the world how to code.

About Us We're hiring Blog
Learn To Code

Make a Website
Make an Interactive Website
Make a Rails Application
HTML & CSS
Javascript
jQuery
Python
Ruby
PHP
Other Programs

Schools
Stories
Follow us

Twitter
Facebook
Google+
Blog
Help Privacy Policy Terms
Made in NYC © 2014 Codecademy
downarrow

JavaScript
From Wikipedia, the free encyclopedia
Not to be confused with Java (programming language), Java (software platform), or Javanese script.
JavaScript
Unofficial JavaScript logo 2.svg
Unofficial JavaScript logo
Paradigm(s)	Multi-paradigm: scripting, object-oriented (prototype-based), imperative, functional[1]
Designed by	Brendan Eich
Developer	Netscape Communications Corporation, Mozilla Foundation
Appeared in	1995; 19 years ago
Stable release	1.8.5[2] / March 22, 2011; 3 years ago
Typing discipline	dynamic, duck
Major implementations	KJS, Rhino, SpiderMonkey, V8, Carakan, Chakra
Influenced by	Scheme, Self, Java, C, Python, AWK, HyperTalk
Influenced	ActionScript, AtScript, CoffeeScript, Dart, JScript .NET, Objective-J, QML, TypeScript, Node.js, LiveScript
 JavaScript at Wikibooks
JavaScript
Javascript icon.svg
Filename extension	.js
Internet media type	application/javascript
text/javascript (obsolete)[3]
Uniform Type Identifier (UTI)	com.netscape.javascript-source[4]
Type of format	Scripting language
Part of a series on
JavaScript
JavaScript syntax
JavaScript library
Unobtrusive JavaScript
JavaScript engine
Lists of Frameworks and Libraries
Ajax frameworks
JavaScript web application frameworks
Comparison of JavaScript frameworks
List of JavaScript libraries
JavaScript unit testing frameworks
JavaScript Object Notation
See also

ECMAScript
v t e
JavaScript (/ˈdʒɑːvəˌskrɪpt/; JS) is a dynamic computer programming language.[5] It is most commonly used as part of web browsers, whose implementations allow client-side scripts to interact with the user, control the browser, communicate asynchronously, and alter the document content that is displayed.[5] It is also used in server-side network programming with frameworks such as Node.js, game development and the creation of desktop and mobile applications.

JavaScript is classified as a prototype-based scripting language with dynamic typing and first-class functions. This mix of features makes it a multi-paradigm language, supporting object-oriented,[6] imperative, and functional[1][7] programming styles.

Despite some naming, syntactic, and standard library similarities, JavaScript and Java are otherwise unrelated and have very different semantics. The syntax of JavaScript is actually derived from C, while the semantics and design are influenced by Self and Scheme programming languages.[8]

JavaScript is also used in environments that aren't web-based, such as PDF documents, site-specific browsers, and desktop widgets. Newer and faster JavaScript virtual machines (VMs) and platforms built upon them have also increased the popularity of JavaScript for server-side web applications. On the client side, JavaScript has been traditionally implemented as an interpreted language, but more recent browsers perform just-in-time compilation.

JavaScript has been standardized in the ECMAScript language specification.

Contents  [hide]
1 History
1.1 Beginnings at Netscape
1.2 Server-side JavaScript
1.3 Adoption by Microsoft
1.4 Standardization
1.5 Later developments
2 Trademark
3 Features
3.1 Imperative and structured
3.2 Dynamic
3.3 Functional
3.4 Prototype-based
3.5 Implicit and explicit delegation
3.6 Miscellaneous
3.7 Vendor-specific extensions
4 Syntax
4.1 Simple examples
4.2 More advanced example
5 Use in web pages
5.1 Example script
5.2 Compatibility considerations
5.3 Accessibility
6 Security
6.1 Cross-site vulnerabilities
6.1.1 Misplaced trust in the client
6.1.2 Browser and plugin coding errors
6.1.3 Sandbox implementation errors
7 Uses outside web pages
7.1 Embedded scripting language
7.2 Scripting engine
7.3 Application platform
7.4 Microcontrollers
8 Development tools
9 Version history
10 Criticisms
11 Related languages and features
11.1 Use as an intermediate language
11.2 JavaScript and Java
12 References
13 Further reading
14 External links
History[edit]
Beginnings at Netscape[edit]
JavaScript was originally developed by Brendan Eich, while working for Netscape Communications Corporation. While competing with Microsoft for user adoption of web technologies and platforms, Netscape considered their client-server offering a distributed OS with a portable version of Sun Microsystems' Java providing an environment in which applets could be run.[citation needed] Because Java was a competitor of C++ and aimed at professional programmers, Netscape also wanted a lightweight interpreted language that would complement Java by appealing to nonprofessional programmers, like Microsoft's Visual Basic (see JavaScript and Java).[9]

Although it was developed under the name Mocha, the language was officially called LiveScript when it first shipped in beta releases of Netscape Navigator 2.0 in September 1995, but it was renamed JavaScript[10] when it was deployed in the Netscape browser version 2.0B3.[11]

The change of name from LiveScript to JavaScript roughly coincided with Netscape adding support for Java technology in its Netscape Navigator web browser. The final choice of name caused confusion, giving the impression that the language was a spin-off of the Java programming language, and the choice has been characterized as a marketing ploy by Netscape to give JavaScript the cachet of what was then the hot new web programming language.[12][13]

There is a common misconception that the JavaScript language was influenced by C-- (pronounced "See-minus-minus"), an earlier web page scripting language developed by Nombas.[14][15][16] Brendan Eich, however, had never heard of C-- before he created LiveScript.[17] Nombas did pitch their embedded web page scripting to Netscape, though web page scripting was not a new concept, as shown by ViolaWWW.[18] Nombas later switched to offering JavaScript instead of C-- in their ScriptEase product and was part of the TC39 group that standardized ECMAScript.[19][20]

Server-side JavaScript[edit]
Netscape introduced an implementation of the language for server-side scripting with Netscape Enterprise Server in December, 1994, soon after releasing JavaScript for browsers.[21][22] Since the mid-2000s, there has been a resurgence of server-side JavaScript implementations, such as Node.js.[23][24]

Adoption by Microsoft[edit]
JavaScript quickly gained widespread adoption as a client-side scripting language for web pages. Microsoft introduced JavaScript support in its own web browser, Internet Explorer, in version 3.0, released in August 1996.[25] Microsoft's webserver, Internet Information Server, introduced support for server-side scripting in JavaScript with the release of version 3.0, also in 1996. Microsoft started to promote webpage scripting using the umbrella term Dynamic HTML.

Microsoft's JavaScript implementation was later renamed JScript to avoid trademark issues. JScript added new date methods to fix the Y2K-problematic methods in JavaScript, which were based on Java's java.util.Date class.

Standardization[edit]
In November 1996, Netscape announced that it had submitted JavaScript to Ecma International for consideration as an industry standard, and subsequent work resulted in the standardized version named ECMAScript. In June 1997, Ecma International published the first edition of the ECMA-262 specification. In June 1998, some modifications were made to adapt it to the ISO/IEC-16262 standard, and the second edition was released. The third edition of ECMA-262 was published on December 1999.[26]

Development of the fourth edition of the ECMAScript standard was never completed.[27] The fifth edition was released in December 2009. The current edition of the ECMAScript standard is 5.1, released in June 2011.[28]

Later developments[edit]
JavaScript has become one of the most popular programming languages on the web. Initially, however, many professional programmers denigrated the language because its target audience consisted of web authors and other such "amateurs", among other reasons.[29] The advent of Ajax returned JavaScript to the spotlight and brought more professional programming attention. The result was a proliferation of comprehensive frameworks and libraries, improved JavaScript programming practices, and increased usage of JavaScript outside of web browsers, as seen by the proliferation of server-side JavaScript platforms.

In January 2009, the CommonJS project was founded with the goal of specifying a common standard library mainly for JavaScript development outside the browser.[30]

Trademark[edit]
"JavaScript" is a trademark of Oracle Corporation.[31] It is used under license for technology invented and implemented by Netscape Communications and current entities such as the Mozilla Foundation.[32]

Features[edit]
The following features are common to all conforming ECMAScript implementations, unless explicitly specified otherwise.

Imperative and structured[edit]
JavaScript supports much of the structured programming syntax from C (e.g., if statements, while loops, switch statements,do while loops, etc.). One partial exception is scoping: C-style block scoping is not supported. Instead, JavaScript has function scoping (although, block scoping using the let keyword was added in JavaScript 1.7). Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allows the semicolons that would normally terminate statements to be omitted.[33]

Dynamic[edit]
Dynamic typing
As in most scripting languages, types are associated with values, not with variables. For example, a variable x could be bound to a number, then later rebound to a string. JavaScript supports various ways to test the type of an object, including duck typing.[34]
Object-based
JavaScript is almost entirely object-based. JavaScript objects are associative arrays, augmented with prototypes (see below). Object property names are string keys. They support two equivalent syntaxes: dot notation (obj.x = 10) and bracket notation (obj['x'] = 10). Properties and their values can be added, changed, or deleted at run-time. Most properties of an object (and those on its prototype inheritance chain) can be enumerated using a for...in loop. JavaScript has a small number of built-in objects such as Function and Date.
Run-time evaluation
JavaScript includes an eval function that can execute statements provided as strings at run-time.
Functional[edit]
First-class functions
Functions are first-class; they are objects themselves. As such, they have properties and methods, such as .call() and .bind().[35] A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each created function forms a lexical closure: the lexical scope of the outer function, including any constants, local variables and argument values, becomes part of the internal state of each inner function object, even after execution of the outer function concludes.[36] Javascript also supports anonymous functions.
Prototype-based[edit]
Prototypes
JavaScript uses prototypes where many other object oriented languages use classes for inheritance.[37] It is possible to simulate many class-based features with prototypes in JavaScript.[38]
Functions as object constructors
Functions double as object constructors along with their typical role. Prefixing a function call with new will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the Object prototype).[39] ECMAScript 5 offers the Object.create method, allowing explicit creation of an instance without automatically inheriting from the Object prototype (older environments can assign the prototype to null).[40] The constructor's prototype property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. JavaScript's built-in constructors, such as Array or Object, also have prototypes that can be modified. While it is possible to modify the Object prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the Object prototype and they may not expect the prototype to be modified.[41]
Functions as methods
Unlike many object-oriented languages, there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling; when a function is called as a method of an object, the function's local this keyword is bound to that object for that invocation.
Implicit and explicit delegation[edit]
JavaScript is a delegation language.

Functions as Roles (Traits and Mixins)
JavaScript natively supports various function-based implementations of Role[42] patterns like Traits[43][44] and Mixins.[45][46] Such a function defines additional behavior by at least one method bound to the this keyword within its function body. A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain.
Object Composition and Inheritance
Whereas explicit function-based delegation does cover composition in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions.
Miscellaneous[edit]
Run-time environment
JavaScript typically relies on a run-time environment (e.g., a web browser) to provide objects and methods by which scripts can interact with the environment (e.g., a webpage DOM). It also relies on the run-time environment to provide the ability to include/import scripts (e.g., HTML <script> elements). This is not a language feature per se, but it is common in most JavaScript implementations.
Variadic functions
An indefinite number of parameters can be passed to a function. The function can access them through formal parameters and also through the local arguments object. Variadic functions can also be created by using the apply method.
Array and object literals
Like many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format.
Regular expressions
JavaScript also supports regular expressions in a manner similar to Perl, which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.[47]
Vendor-specific extensions[edit]
JavaScript is officially managed by Mozilla Foundation, and new language features are added periodically. However, only some JavaScript engines support these new features:

property getter and setter functions (supported by WebKit, Opera,[48] ActionScript, and Rhino)[49]
conditional catch clauses
iterator protocol (adopted from Python)
shallow generators-coroutines (adopted from Python)
array comprehensions and generator expressions (adopted from Python)
proper block scope via the let keyword
array and object destructuring (limited form of pattern matching)
concise function expressions (function(args) expr)
ECMAScript for XML (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21[50])
Syntax[edit]
Main article: JavaScript syntax
As of 2011, the latest version of the language is JavaScript 1.8.5. It is a superset of ECMAScript (ECMA-262) Edition 3. Extensions to the language, including partial ECMAScript for XML (E4X) (ECMA-357) support and experimental features considered for inclusion into future ECMAScript editions, are documented here.[51]

Simple examples[edit]
Variables in JavaScript can be defined using the var keyword:[52]

var x; // defines the variable x, although no value is assigned to it by default
var y = 2; // defines the variable y and assigns the value of 2 to it
Note the comments in the example above, both of which were preceded with two forward slashes.

There is no built-in I/O functionality in JavaScript; the runtime environment provides that. The ECMAScript specification in edition 5.1 mentions:[53]

... indeed, there are no provisions in this specification for input of external data or output of computed results.

However, most runtime environments have a console object[54] that can be used to print output. Here is a minimalist Hello World program:

console.log("Hello world!");
A simple recursive function:

function factorial(n) {
    if (n === 0) {
        return 1;
    }
    return n * factorial(n - 1);
}
Anonymous function (or lambda) syntax and closure example:

var displayClosure = function() {
    var count = 0;
    return function () {
        return ++count;
    };
}
var inc = displayClosure();
inc(); // returns 1
inc(); // returns 2
inc(); // returns 3
Variadic function demonstration (arguments is a special variable).[55]

var sum = function() {
    var i, x = 0;
    for (i = 0; i < arguments.length; ++i) {
        x += arguments[i];
    }
    return x;
}
sum(1, 2, 3); // returns 6
Immediately-invoked function expressions allow functions to pass around variables under their own closures.

var v;
v = 1;
var getValue = (function(v) {
  return function() {return v;};
})(v);

v = 2;

getValue(); // 1
More advanced example[edit]
This sample code displays various JavaScript features.

/* Finds the lowest common multiple (LCM) of two numbers */
function LCMCalculator(x, y) { // constructor function
    var checkInt = function (x) { // inner function
        if (x % 1 !== 0) {
            throw new TypeError(x + " is not an integer"); // throw an exception
        }
        return x;
    };
    this.a = checkInt(x)
    //   semicolons   ^^^^  are optional, a newline is enough
    this.b = checkInt(y);
}
// The prototype of object instances created by a constructor is
// that constructor's "prototype" property.
LCMCalculator.prototype = { // object literal
    constructor: LCMCalculator, // when reassigning a prototype, set the constructor property appropriately
    gcd: function () { // method that calculates the greatest common divisor
        // Euclidean algorithm:
        var a = Math.abs(this.a), b = Math.abs(this.b), t;
        if (a < b) {
            // swap variables
            t = b;
            b = a;
            a = t;
        }
        while (b !== 0) {
            t = b;
            b = a % b;
            a = t;
        }
        // Only need to calculate GCD once, so "redefine" this method.
        // (Actually not redefinition—it's defined on the instance itself,
        // so that this.gcd refers to this "redefinition" instead of LCMCalculator.prototype.gcd.
        // Note that this leads to a wrong result if the LCMCalculator object members "a" and/or "b" are altered afterwards.)
        // Also, 'gcd' === "gcd", this['gcd'] === this.gcd
        this['gcd'] = function () {
            return a;
        };
        return a;
    },
    // Object property names can be specified by strings delimited by double (") or single (') quotes.
    lcm : function () {
        // Variable names don't collide with object properties, e.g., |lcm| is not |this.lcm|.
        // not using |this.a * this.b| to avoid FP precision issues
        var lcm = this.a / this.gcd() * this.b;
        // Only need to calculate lcm once, so "redefine" this method.
        this.lcm = function () {
            return lcm;
        };
        return lcm;
    },
    toString: function () {
        return "LCMCalculator: a = " + this.a + ", b = " + this.b;
    }
};

// Define generic output function; this implementation only works for web browsers
function output(x) {
    document.body.appendChild(document.createTextNode(x));
    document.body.appendChild(document.createElement('br'));
}

// Note: Array's map() and forEach() are defined in JavaScript 1.6.
// They are used here to demonstrate JavaScript's inherent functional nature.
[[25, 55], [21, 56], [22, 58], [28, 56]].map(function (pair) { // array literal + mapping function
    return new LCMCalculator(pair[0], pair[1]);
}).sort(function (a, b) { // sort with this comparative function
    return a.lcm() - b.lcm();
}).forEach(function (obj) {
    output(obj + ", gcd = " + obj.gcd() + ", lcm = " + obj.lcm());
});
The following output should be displayed in the browser window.

LCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56
LCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168
LCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275
LCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638
Use in web pages[edit]
See also: Dynamic HTML and Ajax (programming)
The most common use of JavaScript is to add client-side behavior to HTML pages, a.k.a. Dynamic HTML (DHTML). Scripts are embedded in or included from HTML pages and interact with the Document Object Model (DOM) of the page. Some simple examples of this usage are:

Loading new page content or submitting data to the server via AJAX without reloading the page (for example, a social network might allow the user to post status updates without leaving the page)
Animation of page elements, fading them in and out, resizing them, moving them, etc.
Interactive content, for example games, and playing audio and video
Validating input values of a web form to make sure that they are acceptable before being submitted to the server.
Transmitting information about the user's reading habits and browsing activities to various websites. Web pages frequently do this for web analytics, ad tracking, personalization or other purposes.[56]
Because JavaScript code can run locally in a user's browser (rather than on a remote server), the browser can respond to user actions quickly, making an application more responsive. Furthermore, JavaScript code can detect user actions which HTML alone cannot, such as individual keystrokes. Applications such as Gmail take advantage of this: much of the user-interface logic is written in JavaScript, and JavaScript dispatches requests for information (such as the content of an e-mail message) to the server. The wider trend of Ajax programming similarly exploits this strength.

A JavaScript engine (also known as JavaScript interpreter or JavaScript implementation) is an interpreter that interprets JavaScript source code and executes the script accordingly. The first JavaScript engine was created by Brendan Eich at Netscape Communications Corporation, for the Netscape Navigator web browser. The engine, code-named SpiderMonkey, is implemented in C. It has since been updated (in JavaScript 1.5) to conform to ECMA-262 Edition 3. The Rhino engine, created primarily by Norris Boyd (formerly of Netscape; now at Google) is a JavaScript implementation in Java. Rhino, like SpiderMonkey, is ECMA-262 Edition 3 compliant.

A web browser is by far the most common host environment for JavaScript. Web browsers typically create "host objects" to represent the Document Object Model (DOM) in JavaScript. The web server is another common host environment. A JavaScript webserver would typically expose host objects representing HTTP request and response objects, which a JavaScript program could then interrogate and manipulate to dynamically generate web pages.

Because JavaScript is the only language that the most popular browsers share support for, it has become a target language for many frameworks in other languages, even though JavaScript was never intended to be such a language.[57] Despite the performance limitations inherent to its dynamic nature, the increasing speed of JavaScript engines has made the language a surprisingly feasible compilation target.

Example script[edit]
Below is a minimal example of a standards-conforming web page containing JavaScript (using HTML 5 syntax) and the DOM:

<!DOCTYPE html>

<meta charset="utf-8">
<title>Minimal Example</title>

<h1 id="header">This is JavaScript</h1>

<script>
    document.body.appendChild(document.createTextNode('Hello World!'));

    var h1 = document.getElementById('header'); // holds a reference to the <h1> tag
    h1 = document.getElementsByTagName('h1')[0]; // accessing the same <h1> element
</script>

<noscript>Your browser either does not support JavaScript, or has it turned off.</noscript>
Compatibility considerations[edit]
Main article: Web interoperability
Because JavaScript runs in widely varying environments, an important part of testing and debugging is to test and verify that the JavaScript works across multiple browsers.

The DOM interfaces for manipulating web pages are not part of the ECMAScript standard, or of JavaScript itself. Officially, the DOM interfaces are defined by a separate standardization effort by the W3C; in practice, browser implementations differ from the standards and from each other, and not all browsers execute JavaScript.

To deal with these differences, JavaScript authors can attempt to write standards-compliant code which will also be executed correctly by most browsers; failing that, they can write code that checks for the presence of certain browser features and behaves differently if they are not available.[58] In some cases, two browsers may both implement a feature but with different behavior, and authors may find it practical to detect what browser is running and change their script's behavior to match.[59][60] Programmers may also use libraries or toolkits which take browser differences into account.

Furthermore, scripts may not work for some users. For example, a user may:

use an old or rare browser with incomplete or unusual DOM support,
use a PDA or mobile phone browser which cannot execute JavaScript,
have JavaScript execution disabled as a security precaution,
use a speech browser due to, for example, a visual disability.
To support these users, web authors can try to create pages which degrade gracefully on user agents (browsers) which do not support the page's JavaScript. In particular, the page should remain usable albeit without the extra features that the JavaScript would have added. An alternative approach that many find preferable is to first author content using basic technologies that work in all browsers, then enhance the content for users that have JavaScript enabled. This is known as progressive enhancement.

Accessibility[edit]
Main article: Web accessibility
Assuming that the user has not disabled its execution, client-side web JavaScript should be written to enhance the experiences of visitors with visual or physical disabilities, and certainly should avoid denying information to these visitors.[61]

Screen readers, used by the blind and partially sighted, can be JavaScript-aware and so may access and read the page DOM after the script has altered it. The HTML should be as concise, navigable and semantically rich as possible whether the scripts have run or not. JavaScript should not be totally reliant on mouse or keyboard specific events because a user may be physically unable to use these input devices. For this reason, device-agnostic events such as onfocus and onchange are preferable to device-centric events such as onmouseover and onkeypress in most cases.[61]

JavaScript should not be used in a way that is confusing or disorienting to any web user. For example, using script to alter or disable the normal functionality of the browser, such as by changing the way the "back" or "refresh" buttons work, is usually best avoided. Equally, triggering events that the user may not be aware of reduces the user's sense of control as do unexpected scripted changes to the page content.[62]

Often the process of making a complex web page as accessible as possible becomes a nontrivial problem where issues become matters of debate and opinion, and where compromises are necessary in the end. However, user agents and assistive technologies are constantly evolving and new guidelines and relevant information are continually being published on the web.[61]

Security[edit]
See also: Browser security
JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the web. Browser authors contain this risk using two restrictions. First, scripts run in a sandbox in which they can only perform web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same origin policy: scripts from one web site do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.

There are subsets of general JavaScript — ADsafe, Secure ECMA Script (SES) — that provide greater level of security, especially on code created by third parties (such as advertisements).[63][64]

Content Security Policy is the main intended method of ensuring that only trusted code is executed on a web page.

See also: Content Security Policy
Cross-site vulnerabilities[edit]
Main articles: Cross-site scripting and Cross-site request forgery
A common JavaScript-related security problem is cross-site scripting, or XSS, a violation of the same-origin policy. XSS vulnerabilities occur when an attacker is able to cause a target web site, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. A solution to XSS vulnerabilities is to use HTML escaping whenever displaying untrusted data.

Some browsers include partial protection against reflected XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server side can fully prevent XSS.

XSS vulnerabilities can also occur because of implementation mistakes by browser authors.[65]

Another cross-site vulnerability is cross-site request forgery or CSRF. In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user didn't intend at a target site (like transferring money at a bank). It works because, if the target site relies only on cookies to authenticate requests, then requests initiated by code on the attacker's site will carry the same legitimate login credentials as requests initiated by the user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.

"JavaScript hijacking" is a type of CSRF attack in which a <script> tag on an attacker's site exploits a page on the victim's site that returns private information such as JSON or JavaScript. Possible solutions include:

requiring an authentication token in the POST and GET parameters for any response that returns private information
using POST and never GET for requests that return private information
Misplaced trust in the client[edit]
Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that his JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are:

Web site authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be obfuscated, but obfuscation can be reverse-engineered.
JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client.
Scripts can be selectively disabled, so JavaScript can't be relied on to prevent operations such as right-clicking on an image to save it.[66]
It is extremely bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.
Browser and plugin coding errors[edit]
JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts which would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's API with superuser privileges.

These flaws have affected major browsers including Firefox,[67] Internet Explorer,[68] and Safari.[69]

Plugins, such as video players, Adobe Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).[70][71]

In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.[72] Google Chrome similarly confines its page renderers to their own "sandbox".

Sandbox implementation errors[edit]
Web browsers are capable of running JavaScript outside of the sandbox, with the privileges necessary to, for example, create or delete files. Of course, such privileges aren't meant to be granted to code from the web.

Incorrectly granting privileges to JavaScript from the web has played a role in vulnerabilities in both Internet Explorer[73] and Firefox.[74] In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.[75]

Microsoft Windows allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.[76]

Uses outside web pages[edit]
In addition to web browsers and servers, JavaScript interpreters are embedded in a number of tools. Each of these applications provides its own object model which provides access to the host environment. The core JavaScript language remains mostly the same in each application.

Embedded scripting language[edit]
Google's Chrome extensions, Opera's extensions, Apple's Safari 5 extensions, Apple's Dashboard Widgets, Microsoft's Gadgets, Yahoo! Widgets, Google Desktop Gadgets, and Serence Klipfolio are implemented using JavaScript.
The MongoDB database accepts queries written in JavaScript. MongoDB and NodeJS are the core components of MEAN: a solution stack for creating web applications using just JavaScript.
Adobe's Acrobat and Adobe Reader support JavaScript in PDF files.[77]
Tools in the Adobe Creative Suite, including Photoshop, Illustrator, Dreamweaver, and InDesign, allow scripting through JavaScript.
OpenOffice.org, an office application suite, allows JavaScript to be used as a scripting language.
The interactive music signal processing software Max/MSP released by Cycling '74, offers a JavaScript model of its environment for use by developers. It allows much more precise control than the default GUI-centric programming model.
Apple's Logic Pro X digital audio workstation (DAW) software can create custom MIDI effects plugins using JavaScript.
ECMAScript was included in the VRML97 standard for scripting nodes of VRML scene description files.
The open-source Re-Animator framework allows developing 2D sprite-based games using JavaScript and XML.[78]
The Unity game engine supports a modified version of JavaScript for scripting via Mono.[79]
DX Studio (3D engine) uses the SpiderMonkey implementation of JavaScript for game and simulation logic.[80]
Maxwell Render (rendering software) provides an ECMA standard based scripting engine for tasks automation.[81]
Google Apps Script in Google Spreadsheets and Google Sites allows users to create custom formulas, automate repetitive tasks and also interact with other Google products such as Gmail.[82]
Many IRC clients, like ChatZilla or XChat, use JavaScript for their scripting abilities.[83][84]
SpinetiX products use the SpiderMonkey JavaScript engine to allow scripting within SVG files to create digital signage projects.[85]
Scripting engine[edit]
Microsoft's Active Scripting technology supports JScript as a scripting language.[86]
The Java programming language introduced the javax.script package in version 6 that includes a JavaScript implementation based on Mozilla Rhino. Thus, Java applications can host scripts that access the application's variables and objects, much like web browsers host scripts that access a webpage's Document Object Model (DOM).[87][88]
The Qt C++ toolkit includes a QtScript module to interpret JavaScript, analogous to Java's javax.script package.[89]
JSDB (JavaScript for Databases) is an open-source JavaScript shell for Windows, Mac OS X, Linux, and Unix, which extends the Mozilla JavaScript engine with file, database, email, and network objects.[90]
jslibs is an open-source JavaScript shell for Windows and Linux which extends the Mozilla JavaScript engine. It has the ability to call functions in commonly used libraries like NSPR, SQLite, libTomCrypt, OpenGL, OpenAL, and librsvg.[91]
Late Night Software's JavaScript OSA (aka JavaScript for OSA, or JSOSA) is a freeware alternative to AppleScript for Mac OS X. It is based on the Mozilla 1.5 JavaScript implementation, with the addition of a MacOS object for interaction with the operating system and third-party applications.[92]
Application platform[edit]
ActionScript, the programming language used in Adobe Flash, is another implementation of the ECMAScript standard.
Adobe Integrated Runtime is a JavaScript runtime that allows developers to create desktop applications.
CA, Inc.'s AutoShell cross-application scripting environment is built on the SpiderMonkey Javascript engine. It contains preprocessor-like extensions for command definition, as well as custom classes for various system-related tasks like file I/O, operation system command invocation and redirection, and COM scripting.
GNOME Shell, the shell for the GNOME 3 desktop environment,[93] made JavaScript its default programming language in 2013.[94]
The Mozilla platform, which underlies Firefox, Thunderbird, and some other web browsers, uses JavaScript to implement the graphical user interface (GUI) of its various products.
myNFC is a JavaScript based framework that allows developers to create applications for smart phones.[95]
Qt Quick's markup language (available since Qt 4.7) uses JavaScript for its application logic. Its declarative syntax is also similar to JavaScript.
TypeScript is a programming language based on JavaScript that adds support for optional type annotations and some other language extensions such as classes, interfaces and modules. A TS-script compiles into plain JavaScript and can be executed in any JS host supporting ECMAScript 3 or higher. The compiler is itself written in TypeScript.
Ubuntu Touch provides a JavaScript API for its unified usability interface.
webOS uses the WebKit implementation of JavaScript in its SDK to allow developers to create stand-alone applications solely in JavaScript.
WinJS provides a special Windows Library for JavaScript functionality in Windows 8 that enables the development of Modern style (formerly Metro style) applications in HTML5 and JavaScript.
Microcontrollers[edit]
As the specifications of Microcontrollers have increased over the last few years, it has become possible to use JavaScript to control hardware in embedded devices. There are currently two main implementations:[96]

Espruino is a JavaScript interpreter for low power microcontrollers
Tessel is a microcontroller board with built-in WiFi
Development tools[edit]
Within JavaScript, access to a debugger becomes invaluable when developing large, non-trivial programs. Because there can be implementation differences between the various browsers (particularly within the Document Object Model), it is useful to have access to a debugger for each of the browsers that a web application targets.[97]

Script debuggers are available for Internet Explorer, Firefox, Safari, Google Chrome, Opera and Node.js[98][99][100]

Three debuggers are available for Internet Explorer: Microsoft Visual Studio is the richest of the three, closely followed by Microsoft Script Editor (a component of Microsoft Office),[101] and finally the free Microsoft Script Debugger which is far more basic than the other two. The free Microsoft Visual Web Developer Express provides a limited version of the JavaScript debugging functionality in Microsoft Visual Studio. Internet Explorer has included developer tools since version 8 (reached by pressing the F12 key).

Web applications within Firefox can be debugged using the Firebug add-on, or the older Venkman debugger. Firefox also has a simpler built-in Error Console, which logs and evaluates JavaScript. It also logs CSS errors and warnings.

Opera includes a set of tools called Dragonfly.[102]

WebKit's Web Inspector includes a JavaScript debugger,[103] which is used in Safari. A modified version called Blink DevTools is used in Google Chrome.

Node.js has node-inspector, an interactive debugger that integrates with the Blink DevTools, available in Google Chrome.

Some debugging aids are themselves written in JavaScript and built to run on the Web. An example is the program JSLint, developed by Douglas Crockford who has written extensively on the language. JSLint scans JavaScript code for conformance to a set of standards and guidelines.

Version history[edit]
See also: ECMAScript § Dialects and ECMAScript § Version correspondence
The following table is based on information from multiple sources.[104][105][106]

Version	Release date	Equivalent to	Netscape
Navigator	Mozilla
Firefox	Internet
Explorer	Opera	Safari	Google
Chrome
1.0	March 1996		2.0		3.0
1.1	August 1996		3.0
1.2	June 1997		4.0-4.05			3[107]
1.3	October 1998	ECMA-262 1st + 2nd edition	4.06-4.7x		4.0	5[108]
1.4			Netscape
Server			6
1.5	November 2000	ECMA-262 3rd edition	6.0	1.0	5.5 (JScript 5.5),
6 (JScript 5.6),
7 (JScript 5.7),
8 (JScript 5.8)	7.0	3.0-5	1.0-10.0.666
1.6	November 2005	1.5 + array extras + array and string generics + E4X		1.5
1.7	October 2006	1.6 + Pythonic generators + iterators + let		2.0				28.0.1500.95
1.8	June 2008	1.7 + generator expressions + expression closures		3.0		11.50
1.8.1		1.8 + native JSON support + minor updates		3.5
1.8.2	June 22, 2009	1.8.1 + minor updates		3.6
1.8.5	July 27, 2010	1.8.2 + ECMAScript 5 compliance		4	9	11.60	6.00
Legend:Old versionLatest version
Criticisms[edit]
JavaScript is a loosely typed language (see Dynamic typing above). Loose typing places a majority responsibility for static type management on programmer discipline, very little on the compiler, and late reporting of type safety violation on the run-time. The result is a development environment where type bugs can be easily introduced due to human fallibility. The bugs may be difficult to detect or may go undetected by the run-time for several reasons:

Bugs may never be detected due to host code never being exercised.
Bugs may not be detected due to unreachable host code.
Bugs may not be detected due to not meeting governing business rules, even though technically correctly typed.
Criticism based on loose typing then cautions programmers to be aware of the need for greater programmer discipline and project schedule impact because both detected and undetected bugs increase production time at unpredictable rates.

Related languages and features[edit]
JSON, or JavaScript Object Notation, is a general-purpose data interchange format that is defined as a subset of JavaScript's literal syntax.

jQuery is a popular JavaScript library designed to simplify DOM-oriented client-side HTML scripting.

Underscore.js is a utility JavaScript library for data manipulation which is used in both client-side and server-side network applications.

Mozilla browsers currently support LiveConnect, a feature that allows JavaScript and Java to intercommunicate on the web. However, Mozilla-specific support for LiveConnect is scheduled to be phased out in the future in favor of passing on the LiveConnect handling via NPAPI to the Java 1.6+ plug-in (not yet supported on the Mac as of March 2010).[109] Most browser inspection tools, such as Firebug in Firefox, include JavaScript interpreters that can act on the visible page's DOM.

asm.js is a subset of JavaScript that can be run in any JavaScript engine or run faster in an ahead-of-time (AOT) compiling engine.[110]

Use as an intermediate language[edit]
As JavaScript is the most widely supported client-side language that can run within a web browser, it has become an intermediate language for other languages to target. This has included both newly created languages and ports of existing languages. Some of these include:

Objective-J, a superset of JavaScript that compiles to standard JavaScript. It adds traditional inheritance and Smalltalk/Objective-C style dynamic dispatch and optional pseudo-static typing to JavaScript.
Processing.js, a JavaScript port of Processing, a programming language designed to write visualizations, images, and interactive content. It allows web browsers to display animations, visual applications, games and other graphical rich content without the need for a Java applet or Flash plugin.
CoffeeScript, an alternate syntax for JavaScript intended to be more concise and readable. It adds features like array comprehensions (also available in JavaScript since version 1.7)[111] and pattern matching. Like Objective-J, it compiles to JavaScript. Ruby and Python have been cited as influential on CoffeeScript syntax.
Google Web Toolkit translates a subset of Java to JavaScript.
Scala, an object-oriented and functional programming language, has an experimental Scala-to-Javascript compiler.[112]
Pyjamas, a port of Google Web Toolkit to Python (translates a subset of Python to JavaScript)
Dart, an open-source programming language developed by Google, can be compiled to JavaScript.
Whalesong,[113] a Racket-to-JavaScript compiler.
Emscripten, a LLVM-backend for porting native libraries to JavaScript.
Fantom a programming language that runs on JVM, .NET and JavaScript.
TypeScript, a free and open-source programming language developed by Microsoft. It is a superset of JavaScript, and essentially adds optional static typing and class-based object-oriented programming to the language.
Haxe, an open-source high-level multiplatform programming language and compiler that can produce applications and source code for many different platforms including JavaScript.
ClojureScript,[114] a compiler for Clojure that targets JavaScript. It is designed to emit JavaScript code which is compatible with the advanced compilation mode of the Google Closure optimizing compiler.
Kotlin, a statically-typed language that also compiles to Java byte code.
JavaScript and Java[edit]
A common misconception is that JavaScript is similar or closely related to Java. It is true that both have a C-like syntax (the C language being their most immediate common ancestor language). They also are both typically sandboxed (when used inside a browser), and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0,[115] but the similarities end there.

The differences between the two languages are more prominent than their similarities. Java has static typing, while JavaScript's typing is dynamic. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are class-based, while JavaScript's are prototype-based. Finally, Java did not support functional programming until Java 8, while JavaScript does, as it contains many features based on Scheme.

References[edit]
^ Jump up to: a b Douglas Crockford. Douglas Crockford on Functional JavaScript (flv) (Tech talk). blinkx. Event occurs at 2:49. [JavaScript] is also coincidentally the world's most popular functional programming language. JavaScript is and has always been, at least since [version] 1.2, a functional programming language.[dead link]
Jump up ^ "New in JavaScript 1.8.5 | Mozilla Developer Network". Developer.mozilla.org. 2012-11-18. Retrieved 2013-05-26.
Jump up ^ "RFC 4329". Apps.ietf.org. Retrieved 2013-05-26.
Jump up ^ "System-Declared Uniform Type Identifiers". Mac OS X Reference Library. Apple Inc. Retrieved 2010-03-05.
^ Jump up to: a b Flanagan & Ferguson 2006, p. 1.
Jump up ^ "ECMAScript Language Specification".
Jump up ^ The Little JavaScripter shows the relationship with Scheme in more detail.
Jump up ^ "ECMAScript Language Overview" (PDF). 2007-10-23. p. 4. Retrieved 2009-05-03.
Jump up ^ Severance, Charles (February 2012). "JavaScript: Designing a Language in 10 Days". Computer (IEEE Computer Society) 45 (2): 7–8. doi:10.1109/MC.2012.57. Retrieved 23 March 2013.
Jump up ^ Press release announcing JavaScript, "Netscape and Sun announce Javascript", PR Newswire, December 4, 1995
Jump up ^ "TechVision: Innovators of the Net: Brendan Eich and JavaScript". Web.archive.org. Archived from the original on 2008-02-08.
Jump up ^ "Programming languages used on the Internet and the World Wide Web (WWW)". Webdevelopersnotes.com. Retrieved 2009-05-19.
Jump up ^ "O'Reilly - Safari Books Online - 0596101996 - JavaScript: The Definitive Guide, 5th Edition". Safari.oreilly.com. Retrieved 2009-05-19.
Jump up ^ "The History of Programming Languages - O'Reilly Media". Oreilly.com. Retrieved 2014-04-13.
Jump up ^ "History of JavaScript, ©Brenkoweb". Brenkoweb.com. Retrieved 2014-04-13.
Jump up ^ "What Is JavaScript?". media.wiley.com. Retrieved 2014-04-21.
Jump up ^ "Brent Noorda's Answers on ECMA". Quora. Retrieved 2014-04-13.
Jump up ^ "History of Nombas". Brent-noorda.com. 2010-06-24. Retrieved 2014-04-13.
Jump up ^ "New JavaScript Engine Module Owner". Brendan Eich. 2011-06-21. Retrieved 2014-04-13.
Jump up ^ "Tech - JavaScript for Web Developers". Read.uberflip.com. Retrieved 2014-04-13.
Jump up ^ "Server-Side JavaScript Guide". Netscape Communications Corporation. 1998. Retrieved 2012-04-25. |chapter= ignored (help)
Jump up ^ Mike Morgan (1996). "Using Netscape™ LiveWire™, Special Edition". Que. |chapter= ignored (help)
Jump up ^ "Server-Side Javascript Back With a Vengeance". Read Write Web. December 17, 2009. Retrieved May 28, 2012.
Jump up ^ "Node's goal is to provide an easy way to build scalable network programs". About Node.js. Joyent.
Jump up ^ http://news.microsoft.com/1996/05/29/microsoft-internet-explorer-3-0-beta-now-available//. Missing or empty |title= (help)
Jump up ^ "ECMAScript 3rd Edition specification" (PDF). Retrieved 2013-05-26.
Jump up ^ "Documentation". ECMAScript. Retrieved 2014-04-13.
Jump up ^ "Standard ECMA-262" (PDF). Retrieved 2013-05-26.
Jump up ^ "JavaScript: The World's Most Misunderstood Programming Language". Crockford.com. Retrieved 2009-05-19.
Jump up ^ Kris Kowal (1 December 2009). "CommonJS effort sets JavaScript on path for world domination". Ars Technica. Condé Nast Publications. Retrieved 18 April 2010.
Jump up ^ "USPTO Copyright entry #75026640". USPTO.
Jump up ^ "Sun Trademarks". Sun Microsystems. Archived from the original on 28 May 2010. Retrieved 2007-11-08.
Jump up ^ Flanagan & Ferguson 2006, p. 16.
Jump up ^ Flanagan & Ferguson 2006, pp. 176–178.
Jump up ^ "Properties of the Function Object". Es5.github.com. Retrieved 2013-05-26.
Jump up ^ Flanagan & Ferguson 2006, p. 141.
Jump up ^ "Inheritance and the prototype chain". Mozilla Developer Network. Mozilla. Retrieved 6 April 2013.
Jump up ^ Herman, David (2013). Effective Javascript. Addison-Wesley. p. 83. ISBN 9780321812186.
Jump up ^ Haverbeke, Marjin (2011). Eloquent Javascript. No Starch Press. pp. 95–97. ISBN 9781593272821.
Jump up ^ Katz, Yehuda. "Understanding "Prototypes" in JavaScript". Retrieved 6 April 2013.
Jump up ^ Herman, David (2013). Effective Javascript. Addison-Wesley. pp. 125–127. ISBN 9780321812186.
Jump up ^ The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins, April 11, 2014.
Jump up ^ Traits for Javascript, 2010.
Jump up ^ CocktailJS - ANNOTATIONS. TRAITS. TALENTS., April 2013.
Jump up ^ Angus Croll, A fresh look at JavaScript Mixins, published May 31, 2011.
Jump up ^ JavaScript Code Reuse Patterns, April 19, 2013.
Jump up ^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 139–149. ISBN 978-1593272821.
Jump up ^ Robert Nyman, Getters And Setters With JavaScript - Code Samples And Demos, published 29 May 2009, accessed 2 January 2010.
Jump up ^ John Resig, JavaScript Getters and Setters, 18 July 2007, accessed 2 January 2010
Jump up ^ "E4X - Archive of obsolete content | MDN". Mozilla Developer Network. Mozilla Foundation. Feb 14, 2014. Retrieved 13 July 2014.
Jump up ^ "MDN - About this Reference". Developer.mozilla.org. 2008-08-31. Retrieved 2009-05-19.
Jump up ^ "var - JavaScript - MDN". The Mozilla Developer Network. Retrieved 22 December 2012.
Jump up ^ "ECMAScript Language Specification - ECMA-262 Edition 5.1". Ecma International. Retrieved 22 December 2012.
Jump up ^ "console". Mozilla Developer Network. Mozilla. Retrieved 6 April 2013.
Jump up ^ "arguments". Mozilla Developer Network. Mozilla. Retrieved 6 April 2013.
Jump up ^ "JavaScript tracking - Piwik". Piwik. Retrieved 31 March 2012.
Jump up ^ Hamilton, Naomi (2008-07-31). "The A-Z of Programming Languages: JavaScript". computerworld.com.au.
Jump up ^ Peter-Paul Koch, Object detection
Jump up ^ Peter-Paul Koch, Mission Impossible - mouse position
Jump up ^ Peter-Paul Koch, Browser detect
^ Jump up to: a b c Flanagan & Ferguson 2006, pp. 262–263.
Jump up ^ "Creating Accessible JavaScript". WebAIM. Retrieved 8 June 2010.
Jump up ^ "Making JavaScript Safe for Advertising". ADsafe. Retrieved 2013-05-26.
Jump up ^ "Secure ECMA Script (SES)". Code.google.com. Retrieved 2013-05-26.
Jump up ^ MozillaZine, Mozilla Cross-Site Scripting Vulnerability Reported and Fixed
Jump up ^ "Right-click "protection"? Forget about it". 2008-06-17. ISSN 1797-1993. Retrieved 2008-06-17.
Jump up ^ Mozilla Corporation, Buffer overflow in crypto.signText()
Jump up ^ Paul Festa, CNet, Buffer-overflow bug in IE
Jump up ^ SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files
Jump up ^ SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability
Jump up ^ Fusion Authority, Macromedia Flash ActiveX Buffer Overflow
Jump up ^ Mike Friedman, Protected Mode in Vista IE7
Jump up ^ US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame
Jump up ^ Mozilla Foundation, Mozilla Foundation Security Advisory 2005-41: Privilege escalation via DOM property overrides
Jump up ^ Microsoft Corporation, Changes to Functionality in Microsoft Windows XP Service Pack 2: Part 5: Enhanced Browsing Security
Jump up ^ For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K
Jump up ^ "JavaScript for Acrobat". Retrieved 2009-08-18.
Jump up ^ Re-Animator, in Launchpad
Jump up ^ "Unity Scripting". unity3d.com. Retrieved 2013-01-29.
Jump up ^ "Technical Specification". dxstudio.com. Retrieved 2009-10-20.
Jump up ^ THINK! The Maxwell Render Resourcer Center, Scripting References
Jump up ^ Google Apps Script, Welcome to Google Apps Script
Jump up ^ "ChatZilla! Frequently Asked Questions - 4.5. How do I write scripts?". Chatzilla.hacksrus.com. Retrieved 11 February 2011.
Jump up ^ "http://unborn.ludost.net/xcdscript/". Retrieved 11 February 2011.
Jump up ^ "JavaScript - SpinetiX Support Wiki". SpinetiX. Retrieved 12 December 2012.
Jump up ^ "Version Information (JavaScript)". Msdn.microsoft.com. Retrieved 2013-05-26.
Jump up ^ "javax.script release notes". Java.sun.com. Retrieved 2009-05-19.
Jump up ^ Flanagan & Ferguson 2006, pp. 214 et seq.
Jump up ^ Nokia Corporation, QtScript Module
Jump up ^ JSDB.org (Official website)
Jump up ^ jslibs on Google Code
Jump up ^ Open Scripting Architecture
Jump up ^ "Behind the Scenes with Owen Taylor". The GNOME Journal. Retrieved 2010-01-23.
Jump up ^ "Answering the question: "How do I develop an app for GNOME?"".
Jump up ^ Category: Project's basics (2013-05-22). "myNFC.org". myNFC.org. Retrieved 2013-05-26.
Jump up ^ MAKE: Magazine, First Look: Javascript Microcontrollers
Jump up ^ "Advanced Debugging With JavaScript". alistapart.com. 2009-02-03. Retrieved 2010-05-28.
Jump up ^ "The JavaScript Debugging Console". javascript.about.com. 2010-05-28. Retrieved 2010-05-28.
Jump up ^ "SplineTech JavaScript Debugger - an independent standalone JavaScript Debugger". javascript-debugger.com. 2013-08-26. Retrieved 2013-08-26.
Jump up ^ "Debugging with Node Inspector". http://docs.strongloop.com/. Retrieved 2014-05-07.
Jump up ^ JScript development in Microsoft Office 11 (MS InfoPath 2003)
Jump up ^ "Opera DragonFly". Opera Software.
Jump up ^ "Introducing Drosera - Surfin' Safari". Webkit.org. 2006-06-28. Retrieved 2009-05-19.
Jump up ^ "JavaScript - JScript - ECMAScript version history". Webmasterworld.com. Retrieved 2009-12-17.
Jump up ^ John Resig. "Versions of JavaScript". Ejohn.org. Retrieved 2009-05-19.
Jump up ^ "Version Information (JScript)". Msdn.microsoft.com. Retrieved 2009-12-17.
Jump up ^ "History of the Opera web browser".
Jump up ^ "What Version of Javascript".
Jump up ^ Release Notes for the Next-Generation Java™ Plug-In Technology (introduced in Java SE 6 update 10). Java.sun.com. Retrieved on 2013-06-13.
Jump up ^ "frequently asked questions". asm.js. Retrieved 2014-04-13.
Jump up ^ "New in JavaScript 1.7". Developer.mozilla.org. 2012-12-05. Retrieved 2013-05-26.
Jump up ^ Sébastien Doeraene. "Scala.js". Lampwww.epfl.ch. Retrieved 2014-04-13.
Jump up ^ "Whalesong: a Racket to JavaScript compiler". Hashcollision.org. Retrieved 2014-04-13.
Jump up ^ "clojure/clojurescript · GitHub". Github.com. Retrieved 2014-04-13.
Jump up ^ Brendan Eich (3 April 2008). "Popularity". Retrieved 2012-01-19.
Further reading[edit]
Bhangal, Sham; Jankowski, Tomasz (2003). Foundation Web Design: Essential HTML, JavaScript, CSS, PhotoShop, Fireworks, and Flash. APress L. P. ISBN 1-59059-152-6.
Burns, Joe; Growney, Andree S. (2001). JavaScript Goodies. Pearson Education. ISBN 0-7897-2612-2.
Duffy, Scott (2003). How to do Everything with JavaScript. Osborne. ISBN 0-07-222887-3.
Zakas, Nicholas C. (2012). Professional JavaScript for Web Developers (3rd ed.). Wrox. ISBN 978-1-1180-2669-4.
Flanagan, David; Ferguson, Paula (2006). JavaScript: The Definitive Guide (5th ed.). O'Reilly & Associates. ISBN 0-596-10199-6.
Goodman, Danny; Eich, Brendan (2001). JavaScript Bible. John Wiley & Sons. ISBN 0-7645-3342-8.
Goodman, Danny; Markel, Scott (2003). JavaScript and DHTML Cookbook. O'Reilly & Associates. ISBN 0-596-00467-2.
Harris, Andy (2001). JavaScript Programming for the Absolute Beginner. Premier Press. ISBN 0-7615-3410-5.
Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. ISBN 978-1593272821.
Heinle, Nick; Koman, Richard (1997). Designing with JavaScript. O'Reilly & Associates. ISBN 1-56592-300-6.
McDuffie, Tina Spain (2003). JavaScript Concepts & Techniques: Programming Interactive Web Sites. Franklin, Beedle & Associates. ISBN 1-887902-69-4.
McFarlane, Nigel (2003). Rapid Application Development with Mozilla. Prentice Hall Professional Technical References. ISBN 0-13-142343-6.
Powell, Thomas A.; Schneider, Fritz (2001). JavaScript: The Complete Reference. McGraw-Hill Companies. ISBN 0-07-219127-9.
Shelly, Gary B.; Cashman, Thomas J.; Dorin, William J.; Quasney, Jeffrey J. (2000). JavaScript: Complete Concepts and Techniques. Cambridge: Course Technology. ISBN 0-7895-6233-2.
Vander Veer, Emily A. (2004). JavaScript For Dummies (4th ed.). Wiley Pub. ISBN 0-7645-7659-3.
Watt, Andrew H.; Watt, Jonathan A.; Simon, Jinjer L. (2002). Teach Yourself JavaScript in 21 Days. Pearson Education. ISBN 0-672-32297-8.
External links[edit]
Portal icon	Computer programming portal
Find more about
JavaScript
at Wikipedia's sister projects
Search Wiktionary	Definitions from Wiktionary
Search Commons	Media from Commons
Search Wikibooks	Textbooks from Wikibooks
Search Wikiversity	Learning resources from Wikiversity
Search MediaWiki	Documentation on JavaScript from MediaWiki
Listen to this article (info/dl)


This audio file was created from a revision of the "JavaScript" article dated 2013-08-20, and does not reflect subsequent edits to the article. (Audio help)
More spoken articles
Sound-icon.svg
JavaScript at DMOZ
JS Beginner's tutorial
Codeacademy's JavaScript Track
Douglas Crockford's video lectures on JavaScript
Douglas Crockford's A Survey of the JavaScript Programming Language
Mozilla Developer Center
Mozilla's Official Documentation on JavaScript
References for Core JavaScript versions: 1.5+
overview over new features in JavaScript
List of JavaScript releases: versions 1.5+
Re-Introduction to JavaScript
Eloquent JavaScript by Marijn Haverbeke—a free, Creative Commons–licensed eBook
JavaScript—Opera Developer Community
List of languages that compile to JS
[hide] v t e
JavaScript
Code analysis
JSHint JSLint
Compilers
CoffeeScript Google Closure Compiler Google Web Toolkit Morfik TypeScript
Concepts
Ajax Client-side Dynamic HTML JavaScript library JavaScript syntax Unobtrusive JavaScript
Debuggers
Firebug Microsoft Script Debugger Microsoft Script Editor Microsoft Visual Studio Opera Dragonfly Microsoft Visual Web Developer Express Venkman Web Inspector
Doc generators
JSDoc
Editors
Online Javascript IDE Comparison of JavaScript-based source code editors
Engines
Comparison of layout engines List of ECMAScript engines List of JavaScript engines
Frameworks
Comparison of JavaScript frameworks List of JavaScript libraries
Related languages
ActionScript asm.js CoffeeScript Dart ECMAScript JavaScript OSA JScript TypeScript VBScript
Related technologies
Cascading Style Sheets Document Object Model HTML JSON
Resources
npm NuGet
Server-side
Active Server Pages CommonJS JSGI Node.js Wakanda
Unit testing
Jasmine JSUnit QUnit List of JavaScript unit testing frameworks
People
Douglas Crockford Brendan Eich John Resig
[show] v t e
Programming languages
[show] v t e
ECMAScript
[show] v t e
Web browsers
Categories: JavaScript1995 introductionsAmerican inventionsCross-platform softwareFunctional languagesObject-based programming languagesProgramming languages created in 1995Programming languages with an ISO standardPrototype-based programming languagesScripting languagesWeb programmingDynamically typed programming languages
Navigation menu
Create accountLog inArticleTalkReadEditView history

Main page
Contents
Featured content
Current events
Random article
Donate to Wikipedia
Wikimedia Shop
Interaction
Help
About Wikipedia
Community portal
Recent changes
Contact page
Tools
What links here
Related changes
Upload file
Special pages
Permanent link
Page information
Wikidata item
Cite this page
Print/export
Create a book
Download as PDF
Printable version
Languages
Afrikaans
العربية
Azərbaycanca
বাংলা
Беларуская
Беларуская (тарашкевіца)‎
Български
Català
Чӑвашла
Čeština
Dansk
Deutsch
Eesti
Ελληνικά
Español
Esperanto
Euskara
فارسی
Français
Galego
한국어
Հայերեն
हिन्दी
Hrvatski
Bahasa Indonesia
Interlingua
Íslenska
Italiano
עברית
Basa Jawa
ქართული
Қазақша
Кыргызча
Latviešu
Lietuvių
Magyar
Македонски
മലയാളം
मराठी
مازِرونی
Bahasa Melayu
Монгол
Nederlands
नेपाली
日本語
Norsk bokmål
Occitan
ភាសាខ្មែរ
Polski
Português
Română
Русский
Саха тыла
Shqip
සිංහල
Simple English
Slovenčina
Slovenščina
Српски / srpski
Suomi
Svenska
தமிழ்
తెలుగు
ไทย
Тоҷикӣ
Türkçe
Türkmençe
ᨅᨔ ᨕᨘᨁᨗ
Українська
اردو
Tiếng Việt
粵語
Žemaitėška
中文
Edit links
This page was last modified on 10 December 2014 at 11:45.
Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile viewWikimedia Foundation Powered by MediaWikiSkip to main content
                                                                                                                       Select language
                                                                                                                       Skip to search
                                                                                                                       mozilla
                                                                                                                       Mozilla Developer Network
                                                                                                                       Sign in with
                                                                                                                       ZONES WEB PLATFORM TOOLSDEMOSCONNECT
                                                                                                                       Search   SEARCH
                                                                                                                       LANGUAGES EDITADVANCED
                                                                                                                       MDN

                                                                                                                       Web technology for developers
                                                                                                                        JavaScript
                                                                                                                       JavaScript
                                                                                                                       JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles. Read more about JavaScript.
                                                                                                                       The JavaScript standard is ECMAScript. As of 2012, all modern browsers fully support ECMAScript 5.1. Older browsers support at least ECMAScript 3. A 6th major revision of the standard is in the works.

                                                                                                                       This section of the site is dedicated to the JavaScript language itself, the parts that are not specific to Web pages, or other host environments. For information about APIs specific to Web pages, please see Web APIs and DOM.

                                                                                                                       JavaScript is not to be confused with the Java programming language. Java is a trademark or registered trademark of Oracle in the U.S. and other countries.

                                                                                                                       Tutorials
                                                                                                                       Learn how to program with JavaScript.

                                                                                                                       Introductory

                                                                                                                       JavaScript Guide
                                                                                                                       If you are new to JavaScript, this guide will walk you through the language.
                                                                                                                       JavaScript technologies overview
                                                                                                                       Introduction to the web browser JavaScript landscape.
                                                                                                                       Introduction to Object Oriented JavaScript
                                                                                                                       Introduction to the concepts of object oriented programming in JavaScript.
                                                                                                                       Intermediate

                                                                                                                       A re-introduction to JavaScript
                                                                                                                       An overview for those who think they know about JavaScript.
                                                                                                                       JavaScript data structures
                                                                                                                       Overview of available data structures in JavaScript
                                                                                                                       Equality comparisons and when to use them
                                                                                                                       JavaScript provides three different value-comparison operations: strict equality using === and loose equality using ==.
                                                                                                                       Advanced

                                                                                                                       Inheritance and the prototype chain
                                                                                                                       Explanation of the widely misunderstood and under-estimated prototype-based inheritance.
                                                                                                                       Strict mode
                                                                                                                       A restricted variant of JavaScript.
                                                                                                                       JavaScript typed arrays
                                                                                                                       JavaScript typed arrays provide a mechanism for accessing raw binary data.
                                                                                                                       Memory Management
                                                                                                                       Memory life cycle and garbage collection in JavaScript.
                                                                                                                       Reference
                                                                                                                       Browse the complete JS reference documentation.

                                                                                                                       Standard objects
                                                                                                                       Get to know standard built-in objects Array, Boolean, Date, Error, Function, JSON, Math, Number, Object, RegExp, String, Map, Set, WeakMap, WeakSet, and others.
                                                                                                                       Expressions & operators
                                                                                                                       Learn more about the behavior of JavaScript's operators instanceof, typeof, new, this, and more.
                                                                                                                       Statements & declarations
                                                                                                                       Learn how do-while, for-in, for-of, try-catch, let, var, const, if-else, switch, and more JavaScript statements and keywords work.
                                                                                                                       Functions
                                                                                                                       Learn how to work with JS functions to develop your applications.
                                                                                                                       Tools & resources
                                                                                                                       Helpful tools while writing and debugging your JavaScript code.

                                                                                                                       Firefox Developer Tools
                                                                                                                       Scratchpad, Web Console, JavaScript Profiler, Debugger, and more.
                                                                                                                       Firebug
                                                                                                                       Edit, debug, and monitor CSS, HTML, and JavaScript live in any web page.
                                                                                                                       JavaScript Shells
                                                                                                                       A JavaScript shell allows you to quickly test snippets of JavaScript code.
                                                                                                                       TogetherJS
                                                                                                                       Collaboration made easy.

                                                                                                                       Stack Overflow
                                                                                                                       Stack Overflow questions tagged with "JavaScript".
                                                                                                                       JavaScript versions and release notes
                                                                                                                       Browse JavaScript's feature history and implementation status.
                                                                                                                       Join the JavaScript community
                                                                                                                       Choose your preferred method for joining the discussion:
                                                                                                                       Mailing list Google Group RSS feed
                                                                                                                       IRC: #js (learn more)
                                                                                                                       ES discuss: esdiscuss.org
                                                                                                                       SpiderMonkey: Project page
                                                                                                                       Twitter: @FirefoxNightly
                                                                                                                       Document Tags and Contributors
                                                                                                                       Tags:  LandingJavaScript
                                                                                                                       Contributors to this page: ashishbhatiya18, vergiltest, austincheney, Liekearends, Chris, jswisher, Sephr, phillshaffer, Verruckt, stephaniehobson, Justdave, boonlue, sunorry, allergic, Tallboy, saneyuki_s, firefoxapps, Bogdan, Sheppy, priscillas@gmail.com, fscholz, danielmcgaw, gabriel_pipper, leobalter, Domecraft, shubendra, ashiq.techie, madhuri, paul.irish, Jesse, firabby, asanka-x, iHaris93, siple007, shri_rpi, gandalf, mlex, Cone, vergilistesting, smartmonkey, angel333, vergildj, jchris, websigh, LOVELEELATANYA, marowilson, kunal_dhir, Brettz9, manuel.aberg.cobo, Potappo, indrani7, tregagnon, akp, imonlhec22, Timmi, Nickolay, karedianoorsil, ilink, jkachel, justgage, teoli, anton, john_smith, AndreZSanchez, Dria, stealth, ethertank, gurudevsingh, irowe, pablofiumara, janlehnardt, tanusoha, Plexianth, pink_lebron, stork, dharam, MarkGiffin, Dionys, jardrake, sonujaiswar, nanibrahma, Sevenspade, Erdinc, phyllis.wilson@cpsb.org, pselle, galaxylord, jvns, Oliver_Propst, asher, DavidWalsh, ercompton, ericmdn, MehLON, dmon2013, dbruant, 1marc, BijuGC, ChaitanyaGSNR, Mgjbot, H3h, Ali.MD, Blakeross, Taken, JhonnyX2003, Johnsonne, Robindranatt, Pizdorvan, Pizdorvanec, Chbok, Prodoc, Mathieu Deaudelin, klokan, rdela, user01, Deltab, Khakman, Kaixin110, Azer, AndrewGoal, Dan Smith, Hamstersoup, Kray2, Eric Suen, JohnJBarton1, HeroreV, Bobbysmith007, Kyuzz, 행복한고니, Timcn, Shelby, Serginandr, Adriannecurry, Lizator, Daniel Biddle, RJacinto, Goodwill, Jeff Carr, Mykmelez1, Nevir, Justin Shreve, Stav, bingjie2680, jdaudier, kelunik, heath, fryn, AllenWB, Trasvina, desiree38@live.com, sychonet, BlindWanderer, vvsk, solarce, dflanagan, NISHANTSHRESHTH, haboqueferus, Fuzulli
                                                                                                                       Last updated by: fscholz, Dec 5, 2014 5:17:06 PM
                                                                                                                       HIDE SIDEBAR
                                                                                                                       SEE ALSO
                                                                                                                       JavaScript
                                                                                                                       Tutorials:
                                                                                                                       JavaScript Guide
                                                                                                                       Introductory
                                                                                                                       Intermediate
                                                                                                                       Advanced
                                                                                                                       References:
                                                                                                                       Built-in objects
                                                                                                                       Expressions & operators
                                                                                                                       Statements & declarations
                                                                                                                       Functions
                                                                                                                       More
                                                                                                                       Documentation:
                                                                                                                       Useful lists
                                                                                                                       Contribute
                                                                                                                       © 2005-2014 Mozilla Developer Network and individual contributors
                                                                                                                       Content is available under these licenses · About MDN · Contribute to the code · Privacy policy

                                                                                                                       Other languages: