From Wikipedia, the free encyclopedia Jump to: navigation, search Not to be confused with Ruby (programming language). Ruby on Rails Original author(s) David Heinemeier Hansson Developer(s) Rails Core Team Initial release 13 December 2005; 8 years ago (2005-12-13) Stable release 4.1.8 / November 17, 2014; 21 days ago (2014-11-17)[1] Preview release 4.2.0.rc1 / November 28, 2014; 10 days ago (2014-11-28)[2] Development status Active Written in Ruby Operating system Cross-platform Type Web application framework License Expat License Website rubyonrails.org Ruby on Rails, or simply Rails, is an open source web application framework written in Ruby. Rails is a full-stack framework that emphasizes the use of well-known software engineering patterns and paradigms, including convention over configuration (CoC), don't repeat yourself (DRY), the active record pattern, and model–view–controller (MVC).[3] Contents 1 History 2 Technical overview 2.1 Framework structure 2.2 Deployment 3 Philosophy and design 4 Trademarks 5 Reception 5.1 Scalability 5.2 Security 6 References 7 Bibliography 8 External links History[edit] David Heinemeier Hansson extracted Ruby on Rails from his work on Basecamp, a project management tool by 37signals (now a web application company).[4] Hansson first released Rails as open source in July 2004, but did not share commit rights to the project until February 2005.[5] In August 2006, the framework reached a milestone when Apple announced that it would ship Ruby on Rails with Mac OS X v10.5 "Leopard",[6] which was released in October 2007. Rails version 2.3 was released on March 15, 2009 with major new developments in templates, engines, Rack and nested model forms. Templates enable the developer to generate a skeleton application with custom gems and configurations. Engines give developers the ability to reuse application pieces complete with routes, view paths and models. The Rack web server interface and Metal allow one to write optimized pieces of code that route around ActionController.[7] On December 23, 2008, Merb, another web application framework, was launched, and Ruby on Rails announced it would work with the Merb project to bring "the best ideas of Merb" into Rails 3, ending the "unnecessary duplication" across both communities.[8] Merb was merged with Rails as part of the Rails 3.0 release.[9][10] Rails 3.1 was released on August 31, 2011, featuring Reversible Database Migrations, Asset Pipeline, Streaming, jQuery as default JavaScript library and newly introduced CoffeeScript and Sass into the stack.[11] Rails 3.2 was released on January 20, 2012 with a faster development mode and routing engine (also known as Journey engine), Automatic Query Explain and Tagged Logging.[12] Rails 3.2.x is the last version that supports Ruby 1.8.7.[13] Rails 3.2.12 supports Ruby 2.0[14] Rails 4.0 was released on June 25, 2013, introducing Russian Doll Caching, Turbolinks, Live Streaming as well as making Active Resource, Active Record Observer and other components optional by splitting them as gems.[15] Rails 4.1 was released on April 8, 2014, introducing Spring, Variants, Enums, Mailer previews, and secrets.yml.[16] Version history Version Date 1.0[17] 02005-12-13-0000December 13, 2005 1.2[18] 02007-01-19-0000January 19, 2007 2.0[19] 02007-12-07-0000December 7, 2007 2.1[20] 02008-06-01-0000June 1, 2008 2.2[21] 02008-11-21-0000November 21, 2008 2.3[22] 02009-03-16-0000March 16, 2009 3.0[23] 02010-08-29-0000August 29, 2010 3.1[24] 02011-08-31-0000August 31, 2011 3.2[25] 02012-01-20-0000January 20, 2012 4.0[26] 02013-06-25-0000June 25, 2013 4.1[27] 02014-04-08-0000April 8, 2014 Technical overview[edit] Like many web frameworks, Ruby on Rails uses the model–view–controller (MVC) pattern to organize application programming. In a default configuration, a model in the Ruby on Rails framework maps to a table in a database, and a Ruby file. For example, a model class User will usually be defined in the file user.rb in the app/models directory, and is linked to the table users in the database. Developers can choose any model name, file name or database table name. But this is not common practice and usually discouraged according to the "convention over configuration" philosophy. A controller is a component of Rails that responds to external requests from the web server to the application by determining which view file to render. The controller may also have to query one or more models directly for information and pass these on to the view. A controller may provide one or more actions. In Ruby on Rails, an action is typically a basic unit that describes how to respond to a specific external web-browser request. Also note that the controller/action will be accessible for external web requests only if a corresponding route is mapped to it. Rails encourages developers to use RESTful routes, which include actions such as: create, new, edit, update, destroy, show, and index. These mappings of incoming requests/routes to controller actions can be easily set up in the routes configuration file. A view in the default configuration of Rails is an erb file, which is compiled to HTML at run-time. Many other templating systems can be used for views. Ruby on Rails includes tools that make common development tasks easier "out of the box", such as scaffolding that can automatically construct some of the models and views needed for a basic website.[28] Also included are WEBrick, a simple Ruby web server that is distributed with Ruby, and Rake, a build system, distributed as a gem. Together with Ruby on Rails, these tools provide a basic development environment. Ruby on Rails is most commonly not connected to the Internet directly, but through some front-end web server. Mongrel was generally preferred over WEBrick in the early days,[citation needed] but it can also run on Lighttpd, Apache, Cherokee, Hiawatha, nginx (either as a module — Phusion Passenger for example — or via CGI, FastCGI or mod_ruby), and many others. From 2008 onwards, the Passenger web server replaced Mongrel as the most-used web server for Ruby on Rails.[29] Ruby is also supported natively on the IBM i.[30] Ruby on Rails is also noteworthy for its extensive use of the JavaScript libraries Prototype and Script.aculo.us for Ajax.[31] Ruby on Rails initially utilized lightweight SOAP for web services; this was later replaced by RESTful web services. Ruby on Rails 3.0 uses a technique called Unobtrusive JavaScript to separate the functionality (or logic) from the structure of the web page. jQuery is fully supported as a replacement for Prototype and is the default JavaScript library in Rails 3.1, reflecting an industry-wide move towards jQuery. Additionally, CoffeeScript was introduced in Rails 3.1 as the default Javascript language. Since version 2.0, Ruby on Rails offers both HTML and XML as standard output formats. The latter is the facility for RESTful web services. Rails 3.1 introduced Sass as standard CSS templating. By default, the server uses Embedded Ruby in the HTML views, with files having an html.erb extension. Rails supports swapping-in alternative templating languages, such as HAML and Mustache. Ruby on Rails 3.0 has been designed to work with Ruby 1.8.7, Ruby 1.9.2, and JRuby 1.5.2+; earlier versions are not supported.[32] Rails 3.2 series is the last series to support Ruby 1.8.7. Framework structure[edit] Ruby on Rails is separated into various packages, namely ActiveRecord (an object-relational mapping system for database access), ActiveResource (provides web services), ActionPack, ActiveSupport and ActionMailer. Prior to version 2.0, Ruby on Rails also included the Action Web Service package that is now replaced by Active Resource. Apart from standard packages, developers can make plugins to extend existing packages. Rails 3.2 deprecates the old plugins Rails 2-3-stable style in which plugins are to be placed under vendor/plugins, in favor of packaged gems.[33] Deployment[edit] Ruby on Rails is often installed using RubyGems, a package manager[34] which is included with current versions of Ruby. Many free Unix-like systems also support installation of Ruby on Rails and its dependencies through their native package management system. Ruby on Rails is typically deployed with a database server such as MySQL or PostgreSQL, and a web server such as Apache running the Phusion Passenger module. Philosophy and design[edit] Ruby on Rails is intended to emphasize Convention over Configuration (CoC), and the Don't Repeat Yourself (DRY) principle. "Convention over Configuration" means a developer only needs to specify unconventional aspects of the application. For example, if there is a class Sale in the model, the corresponding table in the database is called sales by default. It is only if one deviates from this convention, such as calling the table "products sold", that the developer needs to write code regarding these names. Generally, Ruby on Rails conventions lead to less code and less repetition.[35] "Don't repeat yourself" means that information is located in a single, unambiguous place. For example, using the ActiveRecord module of Rails, the developer does not need to specify database column names in class definitions. Instead, Ruby on Rails can retrieve this information from the database based on the class name. "Fat models, skinny controllers" means that most of the application logic should be placed within the model while leaving the controller as light as possible. Trademarks[edit] In March 2007, David Heinemeier Hansson filed three Ruby on Rails-related trademark applications to the USPTO. These applications regard the phrase "RUBY ON RAILS",[36] the word "RAILS",[37] and the official Rails logo.[38] As a consequence, in the summer of 2007, Hansson denied permission to Apress to use the Ruby on Rails logo on the cover of a new Ruby on Rails book written by some authoritative community members. The episode gave rise to a polite protest in the Ruby on Rails community.[39][40] In response to this criticism, Hansson replied: I only grant promotional use [of the Rails logo] for products I'm directly involved with. Such as books that I've been part of the development process for or conferences where I have a say in the execution. I would most definitely seek to enforce all the trademarks of Rails.[39] Reception[edit] Scalability[edit] Rails running on Matz's Ruby Interpreter (the de facto reference interpreter for Ruby) had been criticized for issues with scalability.[41] These critics often mentioned various Twitter outages in 2007 and 2008, which spurred Twitter's partial transition to Scala (which runs on the Java Virtual Machine) for their queueing system and other middleware.[42][43] The user interface aspects of the site continued to run Ruby on Rails[44] until 2011 when it was replaced due to concerns over performance [45] In 2011, Gartner Research noted that despite criticisms and comparisons to Java, many high-profile consumer web firms are using Ruby on Rails to build agile, scalable web applications. Some of the largest sites running Ruby on Rails include GitHub, Yammer, Scribd, Shopify, Hulu, and Basecamp.[46] As of May 2014, it is estimated that more than 600,000 web sites are running Ruby on Rails.[47] Security[edit] On September 24, 2013, a session cookie persistence security flaw was reported in Ruby on Rails. In a default configuration, the entire session hash is stored within a session cookie known as CookieStore, allowing any authenticated session possessing the session cookie to log in as the target user at any time in the future. As a workaround, administrators are advised to configure cookies to be stored on the server using mechanisms such as ActiveRecordStore. [48] References[edit] ^ tenderlove. "Rails 3.2.21, 4.0.12, and 4.1.8 have been released". Ruby on Rails. Retrieved 17 Nov 2014.  ^ "Rails 4.2.0.rc1 has been released!".  ^ "Getting Started with Rails: What Is Rails?". Ruby on Rails Guides. Retrieved 10 August 2014.  ^ Grimmer, Lenz (February 2006). "Interview with David Heinemeier Hansson from Ruby on Rails". MySQL AB. Retrieved 2008-06-08.  ^ "Rails core team profiles.". Retrieved 2008-07-15.  ^ Hansson, David (August 7, 2006). "Ruby on Rails will ship with OS X 10.5 (Leopard)". Retrieved 2008-06-08.  ^ Hansson, David (March 16, 2009). "Rails 2.3: Templates, Engines, Rack, Metal, much more!".  ^ "The day Merb joined Rails". 2008-12-27.  ^ Ruby on Rails 3.0 Release Notes ^ "Ruby on Rails 3.0 goes modular". sdtimes.com. 2010-02-10. Retrieved 2010-08-06.  ^ "Ruby on Rails 3.1 Release Notes". 2012-09-01.  ^ "Ruby on Rails 3.2 Release Notes". 2012-09-01.  ^ "Rails/master is now 4.0.0.beta". 2012-09-01.  ^ Rails 3.2.x is now compatible with Ruby 2.0.0 by sikachu · Pull Request #9406 · rails/rails · GitHub. Github.com. Retrieved on 2014-05-30. ^ Rails 4 is finally released ^ Rails 4.1.0: Spring, Variants, Enums, Mailer previews, secrets.yml ^ "Rails 1.0: Party like it's one oh oh!". Riding Rails. Retrieved June 9, 2010. ^ "Rails 1.2: REST admiration, HTTP lovefest, and UTF-8 celebrations". Riding Rails. Retrieved June 9, 2010. ^ "Rails 2.0: It's done!". Riding Rails. Retrieved June 9, 2010. ^ Rails 2.1: Time zones, dirty, caching, gem dependencies, caching, etc. Riding Rails. Retrieved June 9, 2010. ^ "Rails 2.2: i18n, HTTP validators, thread safety, JRuby/1.9 compatibility, docs". Riding Rails. Retrieved June 9, 2010. ^ "Rails 2.3: Templates, Engines, Rack, Metal, much more!". Riding Rails. Retrieved June 9, 2010. ^ "Rails 3.0: It's ready!". Riding Rails. Retrieved August 30, 2010. ^ [1] www.github.com ^ [2] www.github.com ^ [3] blog.wyeworks.com ^ [4] weblog.rubyonrails.org ^ There were quite a few changes in the 2.0 release, including the way that Ruby on Rails generates scaffolding code. ^ Official deployment instructions suggests use of Passenger ^ Maxcer, Chris. "PowerRuby Brings Enterprise Ruby on Rails Support to IBM i". iPro Developer. Retrieved 9 May 2014.  ^ Ruby on Rails includes the Prototype JavaScript framework and the Scriptaculous JavaScript controls and visual effects library. ^ "Rails 3.0: It's ready!". rubyonrails.org. Retrieved 2010-08-30. Rails 3.0 has been designed to work with Ruby 1.8.7, Ruby 1.9.2, and JRuby 1.5.2+.  ^ "Rails 3.2.0.rc2 has been released!". 2012-09-01.  ^ "Ruby on Rails: Download". RubyonRails.org.  ^ "Getting Started with Rails". Rubyonrails.org. Retrieved 2014-03-10.  ^ ""Ruby on Rails" Trademark Status". USPTO. Retrieved 2007-08-01.  ^ ""Rails" Trademark Status". USPTO. Retrieved 2007-08-01.  ^ "Rails Logo Trademark Status". USPTO. Retrieved 2007-08-01.  ^ a b Forde, Pete (2007-07-23). "Beginning Rails: From Novice to Professional". Retrieved 2007-08-01.  ^ Cooper, Peter (2007-07-24). "David Heinemeier Hansson says No to Use of Rails Logo". Retrieved 2007-08-01.  ^ "5 Question Interview with Twitter Developer Alex Payne". radicalbehavior.com. 2007-03-29. Retrieved 2014-11-04. By various metrics Twitter is the biggest Rails site on the net right now. Running on Rails has forced us to deal with scaling issues - issues that any growing site eventually contends with – far sooner than I think we would on another framework.  ^ Steve Jenson, Alex Payne, and Robey Pointer interview (2009-04-03). "Twitter on Scala". artima.com. Retrieved 2009-07-18. We had a Ruby-based queuing system that we used for communicating between the Rails front ends and the daemons, and we ended up replacing that with one written in Scala. The Ruby one actually worked pretty decently in a normal steady state, but the startup time and the crash behavior were undesirable.  ^ "Twitter jilts Ruby for Scala". theregister.co.uk. 2009-04-01. Retrieved 2009-07-18. By the end of this year, Payne said, Twitter hopes to have its entire middleware infrastructure and its APIs ported to the new language. Ruby will remain, but only on the front end. "We're still happy with Rails for building user facing features... performance-wise, it's fine for people clicking around web pages. It's the heavy lifting, asynchronous processing type of stuff that we've moved away from."  ^ ryan king (2009-09-25). "Twitter on Ruby". evan weaver. Retrieved 2009-09-29. We use Scala for a few things at Twitter, but the majority of the site is Ruby.  ^ "Twitter Search is Now 3x Faster". Twitter. Retrieved June 6, 2014. . ^ "Here's Why Ruby On Rails Is Hot". Business Insider. Retrieved February 10, 2012.  ^ "Ruby on Rails Usage Trends". BuiltWith Trends. Retrieved May 4, 2014.  ^ Brook, Chris (2013-09-25). "Security Issue in Ruby on Rails Could Expose Cookies". Threat Post (The Kaspersky Lab Security News Service). Retrieved 2014-06-04.  Bibliography[edit] Ruby, Sam; Thomas, Dave; Hansson, David (March 28, 2009). "Agile Web Development with Rails" (Third ed.). Pragmatic Bookshelf. p. 850. ISBN 1-934356-16-6.  Laurent, Simon St.; Dumbill, Edd (November 28, 2008). "Learning Rails" (First ed.). O'Reilly Media. p. 442. ISBN 0-596-51877-3.  Lenz, Patrick (May 1, 2008). "Simply Rails 2" (Second ed.). SitePoint. p. 450. ISBN 0-9804552-0-0.  Tate, Bruce; Hibbs, Curt (August 22, 2006). "Ruby on Rails: Up and Running" (First ed.). O'Reilly Media. p. 182. ISBN 0-596-10132-5.  Holzner Ph.D., Steve (November 29, 2006). "Beginning Ruby on Rails" (First ed.). Wrox. p. 380. ISBN 0-470-06915-5.  Allan Hardy, Jeffrey; Carneiro Jr, Cloves; Catlin, Hampton (July 20, 2007). "Beginning Ruby on Rails E-Commerce: From Novice to Professional" (First ed.). Wrox. p. 361. ISBN 1-59059-686-2.  Clark, Mike (May 15, 2008). "Advanced Rails Recipes" (First ed.). Pragmatic Bookshelf. p. 464. ISBN 0-9787392-2-1.  External links[edit] Wikibooks has a book on the topic of: Ruby on Rails Ruby on Rails official website – rubyonrails.org Railscasts.com – these screencasts are short and focus on Ruby on Rails technique Rails source code v t e Ruby programming language Implementations Active Ruby MRI / YARV mruby JRuby Rubinius MagLev RubyMotion Discontinued MacRuby IronRuby XRuby RubyJS HotRuby IDE Komodo NetBeans RadRails RubyMine Applications Capistrano Chef Hackety Hack Homebrew Interactive Ruby Shell Pry Puppet Rake Redmine RSpec RubyGems RVM Libraries and frameworks Adhearsion Camping eRuby (RHTML) Gosu Hobo Merb Padrino RailsBricks RubyCocoa Ruby on Rails Ramaze Shoes Sinatra QtRuby Server software mod_ruby Mongrel Phusion Passenger (mod_rails/mod_rack) Rack WEBrick People Yukihiro Matsumoto David Heinemeier Hansson why the lucky stiff Other Application Archives Document format why's (poignant) Guide to Ruby Ruby Central RubyKaigi RubyForge Ruby License Category Commons v t e Web application frameworks ASP.NET ASP.NET Dynamic Data ASP.NET MVC ASP.NET Web Forms BFC DotNetNuke MonoRail OpenRasta Umbraco ColdFusion CFWheels ColdBox Platform ColdSpring Fusebox Mach-II Model-Glue Common Lisp CL-HTTP UnCommon Web Weblocks C++ CppCMS Wt Haskell Happstack Yesod Snap Java AppFuse Flexive Grails GWT ICEfaces ItsNat JavaServer Faces Jspx Juzu Makumba OpenXava Play Reasonable Server Faces Remote Application Platform RIFE Seam Spring Stripes Struts Tapestry Vaadin WebWork Wicket WaveMaker ZK JavaScript Ample SDK AngularJS Backbone.js Chaplin.js Closure Dojo Toolkit Ember.js Ext JS jQuery Meteor Prototype Rico script.aculo.us Sencha Touch SproutCore Wakanda Perl Catalyst Dancer Mason Maypole Mojolicious WebGUI PHP AppFlower CakePHP CodeIgniter Drupal eZ Publish Fat-Free FuelPHP Horde Joomla! Kohana Laravel Lithium Midgard MODX Nette Framework Phalcon PRADO Qcodo Seagull SilverStripe Symfony TYPO3 WordPress Xaraya XOOPS Yii Zend Framework Python BlueBream CherryPy Django Flask Grok Nevow Pyjamas Pylons Pyramid Quixote TACTIC Tornado TurboGears web2py Webware Zope 2 Ruby Camping Hobo Merb Padrino Ramaze RailsBricks Ruby on Rails Sinatra Scala Lift Play Scalatra Smalltalk AIDA/Web Seaside Other languages Application Express (PL/SQL) Grails (Groovy) Kepler (Lua) OpenACS (Tcl) SproutCore (JavaScript/Ruby) SymbolicWeb (Clojure) Yaws (Erlang) Retrieved from "http://en.wikipedia.org/w/index.php?title=Ruby_on_Rails&oldid=637164124" Categories: 2004 introductions Free computer libraries Free software programmed in Ruby Web 2.0 Web application frameworks Software using the MIT license Hidden categories: All articles with unsourced statements Articles with unsourced statements from January 2010